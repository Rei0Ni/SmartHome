@using SmartHome.Dto.Command
@using SmartHome.Dto.Dashboard
@using SmartHome.Shared.Interfaces
@using SmartHome.Shared.Models
@using System.Text.Json
@inject IApiService ApiService

<!-- Fan Card -->
<div class="bg-[#F9FFF4] rounded-xl p-2 flex flex-col items-center gap-2 shadow-sm" style="@(sliderValue > 0 ? "background-color:#F9FFF4;" : "background-color:#FBFBFB;")">
    <div class="flex align-items-center justify-content-between w-100">
        <div>

            <div class="flex align-items-center justify-content-between w-100">
                <div>
                    <svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" width="3.2rem" height="3.2rem" viewBox="0 0 122.88 122.07" style="overflow: visible;">
                        <defs>
                            <style>
                                .fan_on {
                                    fill: none;
                                    stroke: #059212;
                                    stroke-width: 3;
                                    stroke-linecap: round;
                                    stroke-linejoin: round;
                                    fill-rule: evenodd;
                                }

                                .fan_off {
                                    fill: none;
                                    stroke: rgb(186, 186, 186);
                                    stroke-width: 3;
                                    stroke-linecap: round;
                                    stroke-linejoin: round;
                                    fill-rule: evenodd;
                                }

                                @@keyframes spin {
                                    from {
                                        transform: rotate(0deg);
                                    }

                                    to {
                                        transform: rotate(360deg);
                                    }
                                }

                                .rotating-fan {
                                    animation: spin 5s linear infinite;
                                    transform-origin: 50% 50%;
                                    will-change: transform;
                                }
                            </style>
                        </defs>
                        <g id="rotate" class="@(sliderValue > 0 ? "rotating-fan" : "")" >
                            <path class="@(sliderValue > 0 ? "fan_on" : "fan_off") w-12 h-12" d="M67.29,82.9c-.11,1.3-.26,2.6-.47,3.9-1.43,9-5.79,14.34-8.08,22.17C56,118.45,65.32,122.53,73.27,122A37.63,37.63,0,0,0,85,119a45,45,0,0,0,9.32-5.36c20.11-14.8,16-34.9-6.11-46.36a15,15,0,0,0-4.14-1.4,22,22,0,0,1-6,11.07l0,0A22.09,22.09,0,0,1,67.29,82.9ZM62.4,44.22a17.1,17.1,0,1,1-17.1,17.1,17.1,17.1,0,0,1,17.1-17.1ZM84.06,56.83c1.26.05,2.53.14,3.79.29,9.06,1,14.58,5.16,22.5,7.1,9.6,2.35,13.27-7.17,12.41-15.09a37.37,37.37,0,0,0-3.55-11.57,45.35,45.35,0,0,0-5.76-9.08C97.77,9,77.88,14,67.4,36.63a14.14,14.14,0,0,0-1,2.94A22,22,0,0,1,78,45.68l0,0a22.07,22.07,0,0,1,6,11.13Zm-26.9-17c0-1.6.13-3.21.31-4.81,1-9.07,5.12-14.6,7-22.52C66.86,2.89,57.32-.75,49.41.13A37.4,37.4,0,0,0,37.84,3.7a44.58,44.58,0,0,0-9.06,5.78C9.37,25.2,14.39,45.08,37,55.51a14.63,14.63,0,0,0,3.76,1.14A22.12,22.12,0,0,1,57.16,39.83ZM40.66,65.42a52.11,52.11,0,0,1-5.72-.24c-9.08-.88-14.67-4.92-22.62-6.73C2.68,56.25-.83,65.84.16,73.74A37.45,37.45,0,0,0,3.9,85.25a45.06,45.06,0,0,0,5.91,9c16,19.17,35.8,13.87,45.91-8.91a15.93,15.93,0,0,0,.88-2.66A22.15,22.15,0,0,1,40.66,65.42Z" />
                        </g>
                    </svg>
                </div>
            </div>
        </div>
        <div class="flex items-center ">
          
            
                  <input type="range"
                   id="range1"
                   min="0"
                   max="100"
                   step="10"
            @bind="sliderValue"
            @bind:event="oninput"
                   class="green-range sm:w-26"
                   style="width: 90%; margin-left: 13%;"
            @onchange="SetFanSpeed">  
            @* Call SetFanSpeed on change *@
            <span class="text-gray-700 font-medium"></span> <!-- Optional: Display value here -->
           



        </div>
    </div>
    <div class="flex align-items-center justify-content-between w-100">
        <div>
            <h3 class="text-gray-600 font-normal">Fan Speed @sliderValue%</h3>
        </div>
        <div>
            @if (sliderValue > 0)
            {
                <div class="w-4 h-4 rounded-full " style="background-color:#059212"></div> <!--circle on-->
            }
            else
            {
                <div class="w-4 h-4 rounded-full " style="background-color:rgb(128,128,128)"></div> <!--circle off-->
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public OverviewDeviceDto DeviceModel { get; set; } = new();

    [Parameter]
    public Guid ControllerId { get; set; }

    private int sliderValue = 0; // Initial value, 0 for off

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        UpdateFanSpeedFromState(); // Initialize slider value from DeviceModel.State
    }

    private void UpdateFanSpeedFromState()
    {
        if (DeviceModel.State.ContainsKey("fan_speed"))
        {
            var value = DeviceModel.State["fan_speed"];
            if (value is JsonElement element)
            {
                if (element.ValueKind == JsonValueKind.Number && element.TryGetInt32(out int speed))
                {
                    sliderValue = speed;
                }
                else if (element.ValueKind == JsonValueKind.String && int.TryParse(element.GetString(), out int parsedSpeed))
                {
                    sliderValue = parsedSpeed;
                }
                else
                {
                    Console.WriteLine("Warning: fan_speed in DeviceState is not a valid number or string.");
                    sliderValue = 0;
                }
            }
            else if (value is int directSpeed)
            {
                sliderValue = directSpeed;
            }
            else if (value is string speedString && int.TryParse(speedString, out int parsedSpeed))
            {
                sliderValue = parsedSpeed;
            }
            else
            {
                Console.WriteLine("Warning: fan_speed in DeviceState is not in a recognized format.");
                sliderValue = 0;
            }
        }
        else
        {
            sliderValue = 0;
        }
    }


    private async Task SetFanSpeed()
    {
        var commandRequest = new CommandRequestDto()
            {
                AreaId = DeviceModel.AreaId,
                ControllerId = ControllerId,
                Devices = new List<DeviceCommandDto>()
            {
                new DeviceCommandDto()
                {
                    DeviceId = DeviceModel.Id,
                    Function = "setspeed",
                    Parameters = new Dictionary<string, object>()
                    {
                        { "speed", sliderValue } // Send the slider value as 'speed' parameter
                    }
                }
            }
            };

        try
        {
            var result = await ApiService.PostAsync<CommandRequestDto>("/api/command/send-command", commandRequest);

            var commandResponse = await result.Content.ReadFromJsonAsync<CommandResponseDto>();

            if (commandResponse != null && commandResponse.Status?.ToLower() == "success")
            {
                // Command successful, update local DeviceModel.State
                if (DeviceModel.State.ContainsKey("fan_speed"))
                {
                    DeviceModel.State["fan_speed"] = sliderValue; // Update with the slider value
                }
                else
                {
                    DeviceModel.State.Add("fan_speed", sliderValue); // Add if not present
                }
                StateHasChanged(); // Re-render to update UI
            }
            else
            {
                Console.WriteLine($"Fan Speed Command failed: {commandResponse?.Devices[0].Message ?? "Unknown error"}");
                // Optionally: Revert slider value on error or display error to user
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception setting fan speed: {ex.Message}");
            // Optionally: Revert slider value on exception or display error to user
        }
    }
}