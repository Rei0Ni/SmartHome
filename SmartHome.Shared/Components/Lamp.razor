@using SmartHome.Dto.Command
@using SmartHome.Dto.Dashboard
@using SmartHome.Shared.Interfaces
@using SmartHome.Shared.Models
@using System.Text.Json
@inject IApiService ApiService

<!-- Lamp Card  -->
<div class="rounded-xl p-2 flex flex-col items-center gap-2 shadow-sm press-effect origin-center cursor-pointer"
style="@(!isPowerOn ? "background-color: var(--lamp-card-bg-off);" : "background-color: var(--lamp-card-bg-on);")"
@onclick="() => showModal = true">
    @if (DeviceModel.State.ContainsKey("power_state"))
    {
        <div class="flex items-center justify-between w-full">
            @if (!isPowerOn)
            {
                <!-- icon lamp off -->
                <div>
                    <img src="_content/SmartHome.Shared/imgs/Lamp_Off.svg" alt="Lamp off" class="w-10 h-10 object-contain">
                </div>
                <!-- icon power off -->
                <div>
                    <img src="_content/SmartHome.Shared/imgs/icons/power_icon_off_lamp.svg" alt="PowerIcon">
                </div>
            }
            else
            {
                <!-- icon lamp on -->
                <div>
                    <img src="_content/SmartHome.Shared/imgs/Lamp_On.svg" alt="Lamp on" class="w-10 h-10 object-contain">
                </div>
                <!-- icon power on -->
                <div>
                    <img src="_content/SmartHome.Shared/imgs/icons/power_icon_on_lamp.svg" alt="PowerIcon">
                </div>
            }
        </div>

        <div class="flex items-center justify-between w-full">
            <div>
                <span class="text-gray-600 dark:text-gray-50 text-md font-normal">@DeviceModel.Name</span>
            </div>
            @if (!isPowerOn)
            {
                <div class="w-4 h-4 rounded-full" style="background-color: var(--lamp-indicator-off);"></div>
            }
            else
            {
                <div class="w-4 h-4 rounded-full" style="background-color: var(--lamp-indicator-on);"></div>
            }
        </div>
    }
    else
    {
        <div>Device is Malfunctioning</div>
    }
</div>

<!-- Modal clicked -->
@if (showModal)
{
    <div class="fixed inset-0 flex items-center justify-center z-50">
        <!-- transparent background -->
        <div class="absolute inset-0 bg-black opacity-75" @onclick="() => showModal = false"></div>

        <!--  start Modal -->
        <div class="relative bg-surface rounded-xl shadow-2xl w-11/12 sm:w-2/3 md:w-1/2 lg:w-1/3 p-6 z-50 flex flex-col gap-4">
            <!-- close button -->
            @* <button class="absolute top-3 right-3 text-gray-500 dark:text-gray-200 hover:text-gray-700 dark:hover:text-gray-400 cursor-pointer" @onclick="() => showModal = false"> *@
            @*     <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" *@
            @*     viewBox="0 0 24 24" stroke="currentColor"> *@
            @*         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" *@
            @*         d="M6 18L18 6M6 6l12 12" /> *@
            @*     </svg> *@
            @* </button> *@

            @* <span class="text-xl font-semibold text-gray-700 dark:text-gray-50 text-center">@DeviceModel.Name</span> *@

            <div class="flex items-center justify-between">
                <div class="h-6 w-6"></div>
                <h2 class="text-xl font-semibold text-gray-700 dark:text-gray-50 text-center">@DeviceModel.Name</h2>
                <button class="text-gray-500 dark:text-gray-200 hover:text-gray-700 dark:hover:text-gray-400 z-10 cursor-pointer" @onclick="() => showModal = false">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <!-- state lamp toggle on / off -->
            <div class="flex items-center justify-between p-2 rounded-xl shadow-md bg-gray-50 dark:bg-gray-700 press-effect origin-center">
                <div class="flex items-center gap-2">
                    @if (isPowerOn)
                    {
                        <img src="_content/SmartHome.Shared/imgs/Lamp_On.svg" alt="Lamp on" class="w-8 h-8 object-contain">
                        <span class="text-sm text-yellow-600 font-medium">Lamp On</span>
                    }
                    else
                    {
                        <img src="_content/SmartHome.Shared/imgs/Lamp_Off.svg" alt="Lamp off" class="w-8 h-8 object-contain">
                        <span class="text-sm text-gray-600 dark:text-gray-50 font-medium">Lamp Off</span>
                    }
                </div>

                @* @if (isPowerOn) *@
                @* { *@
                <!-- Toggle switch enabled -->

                @* <input id="checkboxInput" type="checkbox" checked="@isPowerOn" @onchange="ToggleDevicePower" /> *@
                @* <label class="toggleSwitch" for="checkboxInput"> *@
                @*     <svg class="slider" *@
                @*     viewBox="0 0 512 512" *@
                @*     height="1em" *@
                @*     xmlns="http://www.w3.org/2000/svg" *@
                @*     style="fill: @(isPowerOn ? "rgb(94,255,1)" : "rgb(255,129,129)");"> *@
                @*         <path d="M288 32c0-17.7-14.3-32-32-32s-32 14.3-32 32V256c0 17.7 14.3 32 32 32s32-14.3 32-32V32zM143.5 120.6c13.6-11.3 15.4-31.5 4.1-45.1s-31.5-15.4-45.1-4.1C49.7 115.4 16 181.8 16 256c0 132.5 107.5 240 240 240s240-107.5 240-240c0-74.2-33.8-140.6-86.6-184.6c-13.6-11.3-33.8-9.4-45.1 4.1s-9.4 33.8 4.1 45.1c38.9 32.3 63.5 81 63.5 135.4c0 97.2-78.8 176-176 176s-176-78.8-176-176c0-54.4 24.7-103.1 63.5-135.4z"></path> *@
                @*     </svg> *@
                @* </label> *@
                <div class="flex items-center justify-center">
                    <div @onclick="ToggleDevicePower"
                    class="relative inline-flex items-center h-7 rounded-full w-12 cursor-pointer
                            transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500"
                    style="background-color: @(!isPowerOn ? "var(--lamp-indicator-off)" : $"var(--lamp-indicator-on)");">

                        <span aria-hidden="true"
                        class="inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0
                                 transition duration-200 ease-in-out
                                 @(isPowerOn ? "translate-x-6" : "translate-x-1")">
                        </span>
                    </div>
                </div>

            </div>

            <!-- Range Slider -->
            <div class="flex flex-col items-center gap-4 mt-4">
                <div class="form-element">
                    <div class="text-2xl font-medium text-center @(isPowerOn ? "dark:text-gray-50" : "dark:text-gray-500") mb-3">@brightnessValue%</div>
                    @if (isPowerOn)
                    {
                        <input type="range"
                               id="brightnessRange"
                               min="5"
                               max="100"
                               @bind="brightnessValue"
                               @bind:event="oninput"
                               @onchange="SetBrightnessAsync" />
                    }
                    else
                    {
                        <input type="range"
                               id="brightnessRange"
                               min="5"
                               max="100"
                               @bind="brightnessValue"
                               @bind:event="oninput"
                               @onchange="SetBrightnessAsync" disabled/>
                    }
                </div>

                <style>
                    .form-element input[type="range"] {
                    -webkit-appearance: none;
                    width: 300px;
                    height: 40px;
                    border-radius: 15px;
                    background: #aaa;
                    outline: none;
                    overflow: hidden;
                    }

                    .form-element input[type="range"]::-webkit-slider-thumb {
                    -webkit-appearance: none;
                    width: 40px;
                    height: 40px;
                    background: var(--lamp-indicator-on);
                    border-radius: 10px;
                    box-shadow: -350px 0px 0px 340px #fbb03b;
                    cursor: pointer;
                    }
                </style>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public OverviewDeviceDto DeviceModel { get; set; } = new();

    [Parameter]
    public Guid ControllerId { get; set; }

    private bool isPowerOn = false; // deafult state of lamp
    private bool showModal = false;
    private int brightnessValue = 0; // intial value of brightness

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        UpdateVisualState();
    }

    private void UpdateVisualState()
    {
        if (DeviceModel.State.TryGetValue("power_state", out var powerStateValue))
        {
            isPowerOn = powerStateValue?.ToString()?.ToLower() == "on";
        }
        if (DeviceModel.State.TryGetValue("brightness", out var newBrightnessValue))
        {
            brightnessValue = int.Parse(newBrightnessValue.ToString()!);
        }
        else
        {
            isPowerOn = false;
            brightnessValue = 0;
        }
        StateHasChanged();
    }

    private async Task ToggleDevicePower()
    {
        if (!DeviceModel.State.ContainsKey("power_state"))
        {
            Console.WriteLine("Device state does not contain 'power_state'. Cannot toggle.");
            return;
        }

        bool desiredState = !isPowerOn;

        var commandRequest = new CommandRequestDto()
            {
                AreaId = DeviceModel.AreaId,
                ControllerId = ControllerId,
                Devices = new List<DeviceCommandDto>()
            {
                new DeviceCommandDto()
                {
                    DeviceId = DeviceModel.Id,
                    Function = "toggle",
                    Parameters = new Dictionary<string, object>()
                    {
                        { "state", desiredState }
                    }
                }
            }
            };

        try
        {
            var result = await ApiService.PostAsync<CommandRequestDto>("/api/command/send-command", commandRequest);

            if (result.IsSuccessStatusCode)
            {
                var commandResponse = await result.Content.ReadFromJsonAsync<CommandResponseDto>();

                if (commandResponse != null && commandResponse.Status?.ToLower() == "success")
                {
                    isPowerOn = desiredState;
                    if (DeviceModel.State.ContainsKey("power_state"))
                    {
                        DeviceModel.State["power_state"] = desiredState ? "on" : "off";
                    }
                }
                else
                {
                    Console.WriteLine($"Command failed: {commandResponse?.Devices?[0]?.Message ?? "Unknown error"}");
                    toastService.ShowError(commandResponse?.Devices?[0]?.Message ?? "Unknown Error");
                }
            }
            else if (result.StatusCode == HttpStatusCode.ServiceUnavailable || result.StatusCode == HttpStatusCode.GatewayTimeout)
            {
                Console.WriteLine("Controller Unavailable. Please try again later.");
                // toastService.Notify(new(ToastType.Danger, IconName.ExclamationTriangle, "An Error Occured", "Controller Unavailable. Please try again later."));
                toastService.ShowError("Controller Unavailable. Please try again later.");
            }
            else if (result.StatusCode == HttpStatusCode.RequestTimeout)
            {
                Console.WriteLine("Controller Unavailable. Please try again later.");
                // toastService.Notify(new(ToastType.Danger, IconName.ExclamationTriangle, "An Error Occured", "Controller Couldn't Respond in Time or is Unavailable. Please try again later."));
                toastService.ShowError("Controller Couldn't Respond in Time or is Unavailable. Please try again later.");
            }
            else
            {
                Console.WriteLine("Internal Server Error");
                toastService.ShowError("Controller Couldn't Respond in Time or is Unavailable. Please try again later.");
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during command: {ex.Message}");
        }
    }

    private async Task SetBrightnessAsync()
    {
        if (!isPowerOn) return; // Don't send brightness updates if device is off

        var commandRequest = new CommandRequestDto()
            {
                AreaId = DeviceModel.AreaId,
                ControllerId = ControllerId,
                Devices = new List<DeviceCommandDto>
            {
                new DeviceCommandDto()
                {
                    DeviceId = DeviceModel.Id,
                    Function = "setbrightness",
                    Parameters = new Dictionary<string, object>
                    {
                        { "brightness", brightnessValue }
                    }
                }
            }
            };

        try
        {
            var result = await ApiService.PostAsync<CommandRequestDto>("/api/command/send-command", commandRequest);

            if (result.IsSuccessStatusCode)
            {
                var commandResponse = await result.Content.ReadFromJsonAsync<CommandResponseDto>();

                if (commandResponse?.Status?.ToLower() == "success")
                {
                    // Update local state only after successful API response
                    if (DeviceModel.State.ContainsKey("brightness"))
                    {
                        DeviceModel.State["brightness"] = brightnessValue;
                    }
                    else
                    {
                        DeviceModel.State.Add("brightness", brightnessValue);
                    }
                }
                else
                {
                    Console.WriteLine($"Brightness update failed: {commandResponse?.Devices?[0]?.Message}");
                    // Optionally revert to previous value
                }
            }
            else if (result.StatusCode == HttpStatusCode.ServiceUnavailable || result.StatusCode == HttpStatusCode.GatewayTimeout)
            {
                Console.WriteLine("Controller Unavailable. Please try again later.");
                // toastService.Notify(new(ToastType.Danger, IconName.ExclamationTriangle, "An Error Occured", "Controller Unavailable. Please try again later."));
                toastService.ShowError("Controller Unavailable. Please try again later.");
            }
            else if (result.StatusCode == HttpStatusCode.RequestTimeout)
            {
                Console.WriteLine("Controller Unavailable. Please try again later.");
                // toastService.Notify(new(ToastType.Danger, IconName.ExclamationTriangle, "An Error Occured", "Controller Couldn't Respond in Time or is Unavailable. Please try again later."));
                toastService.ShowError("Controller Couldn't Respond in Time or is Unavailable. Please try again later.");
            }
            else
            {
                Console.WriteLine($"API request failed with status code: {result.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during brightness update: {ex.Message}");
        }
    }
}
