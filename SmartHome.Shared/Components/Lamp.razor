@using SmartHome.Dto.Command
@using SmartHome.Dto.Dashboard
@using SmartHome.Shared.Interfaces
@using SmartHome.Shared.Models
@using System.Text.Json
@inject IApiService ApiService
<!-- for effect buttons -->
<style>
    .press-effect {
        transition: transform 0.1s ease-in-out, box-shadow 0.1s ease-in-out;
    }

        .press-effect:active {
            transform: scale(0.95);
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.2);
        }

</style>
<!-- Lamp Card  -->
<div class="bg-[#FFFDEB] rounded-xl p-2 flex flex-col items-center gap-2 shadow-sm press-effect origin-center"
     style="@(!isPowerOn ? "background-color:#FBFBFB;" : "background-color:#FFFDEB;") cursor-pointer;"
     @onclick="() => showModal = true">
    @if (DeviceModel.State.ContainsKey("power_state"))
    {
        <div class="flex items-center justify-between w-full">
            @if (!isPowerOn)
            {
                <!-- icon lamp off -->
                <div>
                    <img src="_content/SmartHome.Shared/imgs/Lamp_Off.svg" alt="Lamp off" class="w-10 h-10 object-contain">
                </div>
                <!-- icon power off -->
                <div>
                    <img src="_content/SmartHome.Shared/imgs/icons/power_icon_off_lamp.svg" alt="PowerIcon">
                </div>
            }
            else
            {
                <!-- icon lamp on -->
                <div>
                    <img src="_content/SmartHome.Shared/imgs/Lamp_On.svg" alt="Lamp on" class="w-10 h-10 object-contain">
                </div>
                <!-- icon power on -->
                <div>
                    <img src="_content/SmartHome.Shared/imgs/icons/power_icon_on_lamp.svg" alt="PowerIcon">
                </div>
            }
        </div>

        <div class="flex items-center justify-between w-full ">
            <div>
                <h3 class="text-gray-600 text-sm font-normal">@DeviceModel.Name</h3>
            </div>
            @if (!isPowerOn)
            {
                <div class="w-4 h-4 rounded-full" style="background-color:rgb(128,128,128)"></div>
            }
            else
            {
                <div class="w-4 h-4 rounded-full" style="background-color:#FBB03B"></div>
            }
        </div>
    }
    else
    {
        <div>Device is Malfunctioning</div>
    }
</div>

<!-- if you clicked show modal -->
@if (showModal)
{
    <div class="fixed inset-0 flex items-center justify-center z-50">
        <!-- transparent background -->
        <div class="absolute inset-0 bg-black bg-opacity-50" @onclick="() => showModal = false"></div>

        <!-- content modal -->
        <div class="relative bg-white rounded-xl shadow-2xl w-11/12 sm:w-2/3 md:w-1/2 lg:w-1/3 p-6 z-50 flex flex-col gap-4">
            <!-- button close on top right -->
            <button class="absolute top-3 right-3 text-gray-500 hover:text-gray-700" @onclick="() => showModal = false">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none"
                     viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>

            <h2 class="text-xl font-semibold text-gray-700 text-center">Edit Brightness</h2>

            <!-- show state of lamp and button toggle on / off -->

            <div class="flex items-center justify-between p-2 rounded-xl shadow-md bg-gray-50 press-effect origin-center" @onclick="ToggleDevicePower">

                <div class="flex items-center gap-2">
                    @if (isPowerOn)
                    {
                        <img src="_content/SmartHome.Shared/imgs/Lamp_On.svg" alt="Lamp on" class="w-8 h-8 object-contain">
                        <span class="text-sm text-yellow-600 font-medium">Lamp On</span>
                    }
                    else
                    {
                        <img src="_content/SmartHome.Shared/imgs/Lamp_Off.svg" alt="Lamp off" class="w-8 h-8 object-contain">
                        <span class="text-sm text-gray-600 font-medium">Lamp Off</span>
                    }
                </div>

                @if(isPowerOn){
                    <div class="inline-flex items-center px-3 py-1 text-sm rounded-md" @onclick="ToggleDevicePower">
                            <img src="_content/SmartHome.Shared/imgs/icons/power_icon_on_lamp.svg" alt="PowerIcon_on">
                        </div>
                }else{
                    <div class="inline-flex items-center px-3 py-1 text-sm rounded-md" @onclick="ToggleDevicePower">
                            <img src="_content/SmartHome.Shared/imgs/icons/power_icon_off_lamp.svg" alt="PowerIcon_off">
                        </div>
                }
          
            </div>

            <!-- Range Slider -->
            @if (isPowerOn)
            {
            <div class="flex flex-col items-center gap-4">
                    <div class="form-element">
                        <div id="rangeValue">@brightnessValue%</div>
                        <input type="range" id="brightnessRange" min="5" max="100" @bind="brightnessValue" @oninput="SaveBrightnessAsync">
                    </div>

                    <!-- CSS Range Slider -->
                    <style>
                        .form-element #rangeValue {
                            margin-bottom: 20px;
                            font-size: 20px;
                            font-family: "Raleway";
                            text-align: center;
                            color: #ddd;
                        }

                        .form-element input[type="range"] {
                            -webkit-appearance: none;
                            width: 300px;
                            height: 40px;
                            border-radius: 15px;
                            background: #aaa;
                            outline: none;
                            overflow: hidden;
                        }

                            .form-element input[type="range"]::-webkit-slider-thumb {
                                -webkit-appearance: none;
                                width: 40px;
                                height: 40px;
                                background: #fbb03b;
                                border-radius: 10px;
                                box-shadow: -350px 0px 0px 340px #fbb03b;
                                cursor: pointer;
                            }
                    </style>
            </div>
            }
            else
            {
                <div class="flex flex-col items-center gap-4">
                    <div class="form-element">
                        <div id="rangeValue">Turned Off</div>
                        <input type="range" id="brightnessRange" min="0" max="0" @bind="brightnessValue" @oninput="SaveBrightnessAsync">
                    </div>

                    <!-- CSS Range Slider -->
                    <style>
                        .form-element #rangeValue {
                            margin-bottom: 20px;
                            font-size: 20px;
                            font-family: "Raleway";
                            text-align: center;
                            color: #ddd;
                        }

                        .form-element input[type="range"] {
                            -webkit-appearance: none;
                            width: 300px;
                            height: 40px;
                            border-radius: 15px;
                            background: #aaa;
                            outline: none;
                            overflow: hidden;
                            /* to make input not selected */
                            user-select:none;
                            pointer-events:none;
                        }

                            .form-element input[type="range"]::-webkit-slider-thumb {
                                -webkit-appearance: none;
                                width: 40px;
                                height: 40px;
                                background: #f5f5f5;
                                border-radius: 10px;
                                box-shadow: -350px 0px 0px 340px #f5f5f5;
                                cursor: pointer;
                            }
                    </style>

                </div>
            }

        </div>
    </div>
}


@code {
    [Parameter]
    public OverviewDeviceDto DeviceModel { get; set; } = new();

    [Parameter]
    public Guid ControllerId { get; set; }

    private bool isPowerOn = false; // deafult state
    private bool showModal = false;  
    private int brightnessValue = 50; // intial value for brightness

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Console.WriteLine($"LampCard: OnParametersSet called for Device: {DeviceModel.Name}, DeviceId: {DeviceModel.Id}");
        UpdateVisualState();
    }

    private void UpdateVisualState()
    {
        if (DeviceModel.State.TryGetValue("power_state", out var powerStateValue))
        {
            isPowerOn = powerStateValue?.ToString()?.ToLower() == "on";
        }
        else
        {
            isPowerOn = false;
        }
        StateHasChanged();
    }

    private async Task ToggleDevicePower()
    {
        if (!DeviceModel.State.ContainsKey("power_state"))
        {
            Console.WriteLine("Device state does not contain 'power_state'. Cannot toggle.");
            return;
        }

        bool turnOn = !isPowerOn;

        var commandRequest = new CommandRequestDto()
            {
                AreaId = DeviceModel.AreaId,
                ControllerId = ControllerId,
                Devices = new List<DeviceCommandDto>()
            {
                new DeviceCommandDto()
                {
                    DeviceId = DeviceModel.Id,
                    Function = "toggle",
                    Parameters = new Dictionary<string, object>()
                    {
                        { "state", turnOn }
                    }
                }
            }
            };

        try
        {
            var result = await ApiService.PostAsync<CommandRequestDto>("/api/command/send-command", commandRequest);

            if (result.IsSuccessStatusCode || result.StatusCode != HttpStatusCode.InternalServerError)
            {
                var commandResponse = await result.Content.ReadFromJsonAsync<CommandResponseDto>();

                if (commandResponse != null && commandResponse.Status?.ToLower() == "success")
                {
                    if (DeviceModel.State.ContainsKey("power_state"))
                    {
                        DeviceModel.State["power_state"] = turnOn ? "on" : "off";
                    }
                    UpdateVisualState();
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine($"Command failed: {commandResponse?.Devices?[0]?.Message ?? "Unknown error"}");
                }
            }
            else
            {
                if (result.StatusCode == HttpStatusCode.InternalServerError)
                {
                    toastService.Notify(new(ToastType.Danger, IconName.Bug, "Cannot Connect to Controller", "Cannot Connect to the Controller to Execute your Command"));
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during command: {ex.Message}");
        }
    }

    // need to handle

    private async Task SaveBrightnessAsync()
    {
        
        Console.WriteLine($"Saving brightness value: {brightnessValue}");
        
        await Task.CompletedTask;
    }
}
