@page "/edit-user/{UserId}"
@using System.Text.Json
@using SmartHome.Dto.Area
@layout MainLayout

<PageTitle>Edit User</PageTitle>

<AuthorizeView Roles="Admin">
    <Authorized>
        <div class="min-h-screen  p-4 sm:p-6 lg:p-8">
            <div class="max-w-4xl mx-auto bg-surface rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
                <div class="px-6 py-5 border-b dark:border-gray-700">
                    <h3 class="text-xl font-semibold text-gray-900 dark:text-gray-50">Edit User</h3>
                    <p class="text-gray-600 dark:text-gray-50 mt-2 text-sm sm:text-base">Fill in the details below to update the user</p>
                    @if (isLoading)
                    {
                        <p class="mt-1 text-sm text-gray-500 dark:text-gray-50">Loading user data...</p>
                    }
                </div>

                @if (!isLoading)
                {
                    <EditForm Context="editUserContext" Model="(isAdminProfile ? (object)adminProfile : (object)userProfile)"
                              OnValidSubmit="SubmitForm" class="p-6 md:p-8">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-red-600 mb-4" />

                        <div class="space-y-6">
                            <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                                <!-- First Name -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-50">First Name</label>
                                    @if (isAdminProfile)
                                    {
                                        <InputText @bind-Value="adminProfile.FirstName"
                                                   class="w-full px-3 py-2 dark:bg-white border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                                    }
                                    else
                                    {
                                        <InputText @bind-Value="userProfile.FirstName"
                                                   class="w-full px-3 py-2 dark:bg-white border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                                    }
                                </div>

                                <!-- Last Name -->
                                <div class="space-y-2">
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-50">Last Name</label>
                                    @if (isAdminProfile)
                                    {
                                        <InputText @bind-Value="adminProfile.LastName"
                                                   class="w-full px-3 py-2 dark:bg-white border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                                    }
                                    else
                                    {
                                        <InputText @bind-Value="userProfile.LastName"
                                                   class="w-full px-3 py-2 dark:bg-white border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                                    }
                                </div>

                                @if (isAdminProfile)
                                {
                                    <!-- Email -->
                                    <div class="space-y-2 sm:col-span-2">
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-50">Email</label>
                                        <InputText @bind-Value="adminProfile.Email"
                                                   class="w-full px-3 py-2 border dark:bg-white border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                                    </div>
                                }
                                else
                                {
                                    <!-- Allowed Areas Section -->
                                    <div class="sm:col-span-2 space-y-4">
                                        <div class="flex justify-between items-center">
                                            <h5 class="text-lg font-medium text-gray-900 dark:text-gray-50">Allowed Areas</h5>
                                            <button type="button"
                                                    class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white cursor-pointer"
                                                    style="background-color:var(--primary)"
                                                    onmouseover="this.style.opacity='0.85'"
                                                    onmouseout="this.style.opacity='1'"
                                                    @onclick="ShowModal">
                                                Add Area
                                            </button>
                                        </div>

                                        <div class="overflow-x-auto border border-gray-200 dark:border-gray-700 rounded-md">
                                            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                                                <thead class="bg-gray-50 dark:bg-[#927FBF]">
                                                    <tr>
                                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-50 uppercase tracking-wider">Area Name</th>
                                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-50 uppercase tracking-wider">Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody class="bg-white dark:bg-[#393E46] divide-y divide-gray-200">
                                                    @foreach (var area in areas)
                                                    {
                                                        if (userProfile.AllowedAreas.Contains(area.Id))
                                                        {
                                                            <tr>
                                                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-50">@area.Name</td>
                                                                <td class="px-6 py-4 whitespace-nowrap text-sm">
                                                                    <button type="button"
                                                                            class="bg-red-600 rounded-md px-4 py-2 text-gray-50 hover:bg-red-700 font-medium cursor-pointer"
                                                                            @onclick="() => RemoveArea(area.Id)">
                                                                        Remove
                                                                    </button>
                                                                </td>
                                                            </tr>
                                                        }
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                }
                            </div>

                            <!-- Submit Button -->
                            <div class="pt-4 sm:pt-6">
                                <button type="submit"
                                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white cursor-pointer"
                                        style="background-color:var(--primary)"
                                        onmouseover="this.style.opacity='0.85'"
                                        onmouseout="this.style.opacity='1'">
                                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                                    </svg>
                                    Save Changes
                                </button>
                            </div>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="text-center p-6 sm:p-8">
            <div class="mx-auto max-w-md">
                <svg class="mx-auto h-12 w-12 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636" />
                </svg>
                <h3 class="mt-2 text-lg sm:text-xl font-semibold text-gray-800 dark:text-gray-50 mb-2">Unauthorized Access</h3>
                <p class="text-gray-600 dark:text-gray-200 text-sm sm:text-base">You don't have permission to edit users.</p>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@if (IsModalVisible)
{
    <div class="fixed inset-0 z-50 overflow-y-auto">
        <div class="flex min-h-screen items-center justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div class="absolute inset-0 bg-black opacity-75" @onclick="CloseModal"></div>

            <span class="hidden sm:inline-block sm:h-screen sm:align-middle" aria-hidden="true">&#8203;</span>

            <div class="relative bg-surface rounded-xl shadow-xl inline-block align-middle text-left overflow-hidden transform transition-all w-full max-w-lg mx-4 my-8 z-10">
                <div class="bg-surface px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-medium leading-6 text-gray-900 dark:text-gray-50">Select Area</h3>
                        <button @onclick="CloseModal" class="text-gray-400 hover:text-gray-500 cursor-pointer">
                            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                    <ul class="divide-y divide-gray-200 max-h-96 overflow-y-auto">
                        @foreach (var area in areas.Where(a => !userProfile.AllowedAreas.Contains(a.Id)))
                        {
                            <li class="flex justify-between items-center py-3 px-4 hover:bg-gray-50 dark:hover:bg-gray-600">
                                <span class="text-sm text-gray-900 dark:text-gray-50">@area.Name</span>
                                <button @onclick="() => AddArea(area.Id)"
                                        class="inline-flex items-center bg-primary px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white cursor-pointer"
                                        onmouseover="this.style.opacity='0.85'"
                                        onmouseout="this.style.opacity='1'">
                                    Add
                                </button>
                            </li>
                        }
                    </ul>
                    @if (!areas.Where(a => !userProfile.AllowedAreas.Contains(a.Id)).Any())
                    {
                        <div class="text-center text-gray-500 py-3">No areas available</div>
                    }
                </div>
            </div>
        </div>
    </div>
}
@code {
    [Parameter]
    public string UserId { get; set; } = string.Empty;

    private bool isLoading = true;
    private bool isAdminProfile = false;
    private UpdateAdminUserProfileDto adminProfile = new();
    private UpdateUserProfileDto userProfile = new();
    private List<AreaDto> areas = new List<AreaDto>();

    private bool IsModalVisible = false;
    private string ErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var areasResult = await ApiService.GetAsync("/api/area/get/all");
        if (areasResult.IsSuccessStatusCode)
        {
            areas = await areasResult.Content.ReadFromJsonAsync<List<AreaDto>>()!;
        }
        else
        {
            ErrorMessage = "Failed to load areas.";
        }

        // Retrieve user profile details using the UserId route parameter.
        var result = await ApiService.GetAsync($"/api/user/get/{UserId}");
        if (result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadFromJsonAsync<ApiResponse<JsonElement>>();
            if (content != null)
            {
                var root = content.Data;
                // Determine which DTO to use based on the presence of the 'email' property.
                if (root.TryGetProperty("email", out _))
                {
                    isAdminProfile = true;
                    adminProfile = JsonSerializer.Deserialize<UpdateAdminUserProfileDto>(
                        root.GetRawText(),
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                    )!;
                }
                else
                {
                    isAdminProfile = false;
                    userProfile = JsonSerializer.Deserialize<UpdateUserProfileDto>(
                        root.GetRawText(),
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                    )!;
                }
            }
            else
            {
                toastService.ShowError("Couldn't load the User Data");
            }
        }
        else
        {
            toastService.ShowError("Couldn't load the User Data");
        }
        isLoading = false;
    }

    private void ShowModal() => IsModalVisible = true;
    private void CloseModal() => IsModalVisible = false;

    private void AddArea(Guid areaId)
    {
        if (!userProfile.AllowedAreas.Contains(areaId))
        {
            userProfile.AllowedAreas.Add(areaId);
        }
        CloseModal();
        StateHasChanged();
    }

    private void RemoveArea(Guid areaId)
    {
        userProfile.AllowedAreas.Remove(areaId);
        StateHasChanged();
    }

    private async Task SubmitForm()
    {
        HttpResponseMessage response;
        if (isAdminProfile)
        {
            response = await ApiService.SendAsync(HttpMethod.Put, "/api/user/update/admin", adminProfile);
        }
        else
        {
            response = await ApiService.SendAsync(HttpMethod.Put, "/api/user/update/", userProfile);
        }

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowSuccess("User profile has been updated successfully");
            navigationManager.NavigateTo("/manage-users");
        }
        else
        {
            var responseContent = response.Content.ReadAsStringAsync();
            toastService.ShowError("Couldn't update user profile");
        }
    }
}
