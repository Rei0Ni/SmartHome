@page "/edit-user/{UserId}"
@using System.Text.Json
@using SmartHome.Dto.Area
@layout MainLayout

<AuthorizeView>
    <Authorized>
        <h3>Edit User Profile</h3>
        @if (isLoading)
        {
            <p>Loading user data...</p>
        }
        else
        {
            <EditForm Context="editUserContext" Model="(isAdminProfile ? (object)adminProfile : (object)userProfile)" OnValidSubmit="SubmitForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                @* <div class="form-group"> *@
                @*     <label>User ID</label> *@
                @*     <InputText @bind-Value="UserId" class="form-control" disabled /> *@
                @* </div> *@
                <div class="form-group">
                    <label>First Name</label>
                    @if (isAdminProfile)
                    {
                        <InputText @bind-Value="adminProfile.FirstName" class="form-control" />
                    }
                    else
                    {
                        <InputText @bind-Value="userProfile.FirstName" class="form-control" />
                    }
                </div>
                <div class="form-group">
                    <label>Last Name</label>
                    @if (isAdminProfile)
                    {
                        <InputText @bind-Value="adminProfile.LastName" class="form-control" />
                    }
                    else
                    {
                        <InputText @bind-Value="userProfile.LastName" class="form-control" />
                    }
                </div>
                @if (isAdminProfile)
                {
                    <div class="form-group">
                        <label>Email</label>
                        <InputText @bind-Value="adminProfile.Email" class="form-control" />
                    </div>
                }
                else{
                    <div class="mt-3">
                        <div class="d-flex justify-content-between">
                            <h5 class="h5">Allowed Areas</h5>
                            <button type="button" class="btn btn-success" @onclick="ShowModal">Add Area</button>
                        </div>

                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Area Name</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var area in areas)
                                {
                                    if (userProfile.AllowedAreas.Contains(area.Id))
                                    {
                                        <tr>
                                            <td>@area.Name</td>
                                            <td>
                                                <button type="button" class="btn btn-danger" @onclick="() => RemoveArea(area.Id)">Remove</button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                }
                <button type="submit" class="btn btn-primary">Save Changes</button>
            </EditForm>
        }
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to edit user profiles.</p>
    </NotAuthorized>
</AuthorizeView>

@if (IsModalVisible)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Select Area</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <ul class="list-group">
                        @foreach (var area in areas)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @area.Name
                                <button type="button" class="btn btn-success" @onclick="() => AddArea(area.Id)">Add</button>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    [Parameter]
    public string UserId { get; set; } = string.Empty;

    private bool isLoading = true;
    private bool isAdminProfile = false;
    private UpdateAdminUserProfileDto adminProfile = new();
    private UpdateUserProfileDto userProfile = new();
    private List<AreaDto> areas = new List<AreaDto>();

    private bool IsModalVisible = false;
    private string ErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var areasResult = await ApiService.GetAsync("/api/area/get/all");
        if (areasResult.IsSuccessStatusCode)
        {
            areas = await areasResult.Content.ReadFromJsonAsync<List<AreaDto>>()!;
        }
        else
        {
            ErrorMessage = "Failed to load areas.";
        }

        // Retrieve user profile details using the UserId route parameter.
        var result = await ApiService.GetAsync($"/api/user/get/{UserId}");
        if (result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadFromJsonAsync<ApiResponse<JsonElement>>();
            if (content != null)
            {
                var root = content.Data;
                // Determine which DTO to use based on the presence of the 'email' property.
                if (root.TryGetProperty("email", out _))
                {
                    isAdminProfile = true;
                    adminProfile = JsonSerializer.Deserialize<UpdateAdminUserProfileDto>(
                        root.GetRawText(),
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                    )!;
                }
                else
                {
                    isAdminProfile = false;
                    userProfile = JsonSerializer.Deserialize<UpdateUserProfileDto>(
                        root.GetRawText(),
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                    )!;
                }
            }
            else
            {
                toastService.Notify(new ToastMessage(ToastType.Danger, IconName.Bug, "Failed to load user data.", "Couldn't load the User Data"));
            }
        }
        else
        {
            toastService.Notify(new ToastMessage(ToastType.Danger, IconName.Bug, "Failed to load user data.", "Couldn't load the User Data"));
        }
        isLoading = false;
    }

    private void ShowModal() => IsModalVisible = true;
    private void CloseModal() => IsModalVisible = false;

    private void AddArea(Guid areaId)
    {
        if (!userProfile.AllowedAreas.Contains(areaId))
        {
            userProfile.AllowedAreas.Add(areaId);
        }
        CloseModal();
        StateHasChanged();
    }

    private void RemoveArea(Guid areaId)
    {
        userProfile.AllowedAreas.Remove(areaId);
        StateHasChanged();
    }

    private async Task SubmitForm()
    {
        HttpResponseMessage response;
        if (isAdminProfile)
        {
            response = await ApiService.SendAsync(HttpMethod.Put, "/api/user/update/admin", adminProfile);
        }
        else
        {
            response = await ApiService.SendAsync(HttpMethod.Put, "/api/user/update/", userProfile);
        }

        if (response.IsSuccessStatusCode)
        {
            toastService.Notify(new(ToastType.Success, IconName.HandThumbsUp, "User profile updated successfully.", "User profile has been updated successfully"));
            navigationManager.NavigateTo("/manage-users");
        }
        else
        {
            var responseContent = response.Content.ReadAsStringAsync();
            toastService.Notify(new(ToastType.Danger, IconName.Bug, "Failed to update user profile.", "Couldn't update user profile"));
        }
    }
}
