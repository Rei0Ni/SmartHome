@page "/manage-users"
@using System.Text.Json
@layout MainLayout

<AuthorizeView>
    <Authorized>
        @if (!context.User.IsInRole("Admin"))
        {
            toastService.Notify(new(ToastType.Warning, IconName.ExclamationTriangle, "Not Authorized", "You are NOT Authorized to be Here"));
        }

        <!-- Header Section -->
        <div class="flex justify-between items-center mb-6 px-4">
            <h3 class="text-2xl font-semibold text-gray-800">Manage Users</h3>
            <button class="px-4 py-2  text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2" style="background-color:var(--primary)"
                    @onclick="NavigateToUserCreation">
                <i class="bi bi-person-plus"></i>
                New User
            </button>
        </div>

        <!-- Users Table -->
        <div class="bg-white rounded-xl shadow-sm overflow-hidden">
            <div class="overflow-x-auto rounded-lg shadow-sm border border-gray-200">
                @if (users.Count == 0)
                {
                    <div class="text-center py-12">
                        <p>There are no users here yet.</p>
                        <button class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white"
                                style="background-color:var(--primary)"
                                onmouseover="this.style.opacity='0.85'"
                                onmouseout="this.style.opacity='1'"
                                @onclick="NavigateToUserCreation">
                            Create a New User
                        </button>
                    </div>
                }
                else
                {
                    <table class="w-full min-w-[800px]">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">Username</th>
                                <th class="hidden sm:table-cell px-4 py-3 text-left text-sm font-medium text-gray-700">First Name</th>
                                <th class="hidden sm:table-cell px-4 py-3 text-left text-sm font-medium text-gray-700">Last Name</th>
                                <th class="hidden sm:table-cell px-4 py-3 text-left text-sm font-medium text-gray-700 break-all">Email</th>
                                <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">Last Login</th>
                                <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">Role</th>
                                <th class="px-4 py-3 text-left text-sm font-medium text-gray-700">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200">
                            @foreach (var user in users)
                            {
                                <tr class="hover:bg-gray-50 transition-colors">
                                    <td class="px-4 py-3 text-sm text-gray-700">@user.Username</td>
                                    <td class="hidden sm:table-cell px-4 py-3 text-sm text-gray-700">@user.FirstName</td>
                                    <td class="hidden sm:table-cell px-4 py-3 text-sm text-gray-700">@user.LastName</td>
                                    <td class="hidden sm:table-cell px-4 py-3 text-sm text-gray-700 break-all">@user.Email</td>
                                    <td class="px-4 py-3 text-sm text-gray-700">@user.LastLogin</td>
                                    <td class="px-4 py-3 text-sm text-gray-700">@user.Role.Replace("_", " ")</td>
                                    <td class="px-4 py-3">
                                        <div class="flex items-center gap-2">
                                            <button class="px-3 py-1.5  text-white rounded-md hover:bg-blue-700 transition-colors text-sm" style="background-color:var(--primary)"
                                                    @onclick="@(() => navigationManager.NavigateTo($"/edit-user/{user.UserId.ToString()}"))">
                                                Edit
                                            </button>
                                            <button class="px-3 py-1.5 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors text-sm"
                                                    @onclick="() => ConfirmDelete(user)">
                                                Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        @{
            navigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

<!-- Delete Modal -->
@if (showDeleteModal)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
        <div class="bg-white rounded-lg p-6 max-w-xs w-full mx-4">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold m-0">Confirm Deletion</h3>
                <button class="text-gray-500 hover:text-gray-700 flex items-center gap-2"
                       @onclick="CloseDeleteModal">
                    <i class="fas fa-x text-md text-black pe-2"></i>
                </button>
            </div>
            <p class="mb-6 text-gray-600">Are you sure you want to delete @selectedUser?.Username?</p>
            <div class="flex justify-end gap-3">
                <button class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
                        @onclick="CloseDeleteModal">
                    Cancel
                </button>
                <button class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
                        @onclick="DeleteUser">
                    Delete
                </button>
            </div>
        </div>
    </div>
}



@code {
    List<UserWithRolesDto> users = new List<UserWithRolesDto>();
    private bool showDeleteModal = false;
    private UserWithRolesDto? selectedUser;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var result = await ApiService.GetAsync("api/user/get/all");
        if (result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            var response = JsonSerializer.Deserialize<ApiResponse<object>>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true, PropertyNamingPolicy = JsonNamingPolicy.CamelCase });
            if (response!.Status == "Error")
            {
                // Show error message in toast
            }
            else
            {
                users = JsonSerializer.Deserialize<List<UserWithRolesDto>>(response.Data.ToString()!, new JsonSerializerOptions { PropertyNameCaseInsensitive = true, PropertyNamingPolicy = JsonNamingPolicy.CamelCase })!;
            }
        }
        else
        {
            // Show error message in toast
        }
    }

    private void NavigateToUserCreation()
    {
        navigationManager.NavigateTo("/create-user");
    }

    private void ConfirmDelete(UserWithRolesDto user)
    {
        selectedUser = user;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        selectedUser = null;
    }

    private async Task DeleteUser()
    {
        if (selectedUser != null)
        {

            var result = await ApiService.SendAsync<object>(HttpMethod.Delete, $"api/user/delete/{selectedUser.UserId}");
            if (result.IsSuccessStatusCode)
            {
                users.Remove(selectedUser);
				toastService.Notify(new(ToastType.Success, IconName.CheckCircle, "Success", $"{selectedUser.Username} has been deleted successfully"));
            }
            else
            {
                // Show error message in toast
				toastService.Notify(new(ToastType.Danger, IconName.Bug, "Error", $"Failed to delete {selectedUser.Username}"));
            }
            showDeleteModal = false;
            selectedUser = null;
        }
    }
}
