@page "/create-user"
@using SmartHome.Dto.Area
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Web
@layout MainLayout
@using QRCoder
@using System.IO

<AuthorizeView>
    <Authorized>
        @{
            IsAdmin = context.User.IsInRole("Admin");
        }

        <h3 class="h3">Create User</h3>

        <EditForm Context="userCreationContext" Model="@(SelectedRole == "Admin" ? NewAdmin : NewUser)" OnValidSubmit="SubmitCreateUserForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (IsAdmin)
            {
                <div class="form-group">
                    <label>Role:</label>
                    <select @bind="SelectedRole" class="form-control">
                        <option value="Admin">Admin</option>
                        <option value="User">Normal User</option>
                        <option value="Guest">Guest</option>
                    </select>
                </div>
            }

            @if (SelectedRole == "Admin")
            {
                <div class="form-group">
                    <label>Username:</label>
                    <InputText @bind-Value="NewAdmin.Username" class="form-control" />
                </div>
                <div class="form-group">
                    <label>First Name:</label>
                    <InputText @bind-Value="NewAdmin.FirstName" type="text" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Last Name:</label>
                    <InputText @bind-Value="NewAdmin.LastName" type="text" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Email:</label>
                    <InputText @bind-Value="NewAdmin.Email" type="email" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Password:</label>
                    <InputText @bind-Value="NewAdmin.Password" type="password" class="form-control" />
                </div>
            }
            else
            {
                <div class="form-group">
                    <label>Username:</label>
                    <InputText @bind-Value="NewUser.Username" class="form-control" />
                </div>
                <div class="form-group">
                    <label>First Name:</label>
                    <InputText @bind-Value="NewUser.FirstName" type="text" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Last Name:</label>
                    <InputText @bind-Value="NewUser.LastName" type="text" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Password:</label>
                    <InputText @bind-Value="NewUser.Password" type="password" class="form-control" />
                </div>

                <div class="mt-3">
                    <div class="d-flex justify-content-between">
                        <h5 class="h5">Allowed Areas</h5>
                        <button type="button" class="btn btn-success" @onclick="ShowModal">Add Area</button>
                    </div>

                    <table class="table">
                        <thead>
                            <tr>
                                <th>Area Name</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var area in areas)
                            {
                                if (NewUser.AllowedAreas.Contains(area.Id))
                                {
                                    <tr>
                                        <td>@area.Name</td>
                                        <td>
                                            <button type="button" class="btn btn-danger" @onclick="() => RemoveArea(area.Id)">Remove</button>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger">@ErrorMessage</div>
            }

            <button type="submit" class="btn btn-primary">Create User</button>

            @if (!string.IsNullOrEmpty(TotpQRUri))
            {
                <div class="mt-4">
                    <img id="qrcodeImage" src="@TotpQRUri" alt="TOTP QR Code" />
                    <p>Scan this QR code with your authenticator app (e.g., Google Authenticator, Authy).</p>
                    <p>Secret Key: @SecretKey (For manual entry if needed)</p>
                </div>
            }

        </EditForm>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to create users.</p>
    </NotAuthorized>
</AuthorizeView>

@if (IsModalVisible)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Select Area</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <ul class="list-group">
                        @foreach (var area in areas)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @area.Name
                                <button type="button" class="btn btn-success" @onclick="() => AddArea(area.Id)">Add</button>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    private RegisterUserDto NewUser = new();
    private RegisterAdminUserDto NewAdmin = new();
    private List<AreaDto> areas = new List<AreaDto>();
    private bool IsAdmin;
    private string SelectedRole;
    private bool IsModalVisible = false;
    private string ErrorMessage = string.Empty;

    private string TotpQRUri = string.Empty;
    private string SecretKey = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SelectedRole = IsAdmin ? "Admin" : "User";
        var result = await ApiService.GetAsync("/api/area/get/all");
        if (result.IsSuccessStatusCode)
        {
            areas = await result.Content.ReadFromJsonAsync<List<AreaDto>>()!;
        }
        else
        {
            ErrorMessage = "Failed to load areas.";
        }
    }

    private void ShowModal() => IsModalVisible = true;
    private void CloseModal() => IsModalVisible = false;

    private void AddArea(Guid areaId)
    {
        if (!NewUser.AllowedAreas.Contains(areaId))
        {
            NewUser.AllowedAreas.Add(areaId);
        }
        CloseModal();
        StateHasChanged();
    }

    private void RemoveArea(Guid areaId)
    {
        NewUser.AllowedAreas.Remove(areaId);
        StateHasChanged();
    }

    private async Task SubmitCreateUserForm()
    {
        try
        {
            HttpResponseMessage result = SelectedRole == "Admin"
                ? await ApiService.PostAsync<RegisterAdminUserDto>("/api/user/create/admin", NewAdmin)
                : await ApiService.PostAsync<RegisterUserDto>($"/api/user/create/{SelectedRole.ToLower()}", NewUser);

            if (!result.IsSuccessStatusCode)
            {
                var response = await result.Content.ReadFromJsonAsync<ApiResponse<object>>();
                if (response?.Data is JsonElement jsonElement && jsonElement.ValueKind == JsonValueKind.Array)
                {
                    var errors = JsonSerializer.Deserialize<List<string>>(jsonElement.GetRawText());
                    foreach (var error in errors)
                    {
                        toastService.Notify(new ToastMessage(ToastType.Danger, IconName.Bug, "Error", error));
                    }
                }
                else
                {
                    ErrorMessage = "User creation failed: " + response?.Data;
                }
            }
            else
            {
                toastService.Notify(new ToastMessage(ToastType.Success, IconName.HandThumbsUp, "User Created Successfully", "The User was Created Successfully"));
                var response = await result.Content.ReadFromJsonAsync<ApiResponse<Dictionary<string, string>>>();//Changed to Dictionary
                if (response != null && response.Data != null)
                {
                    TotpQRUri = response.Data["totpQRUri"];//access by key
                    SecretKey = response.Data["secretKey"];
                    GenerateQRCode(TotpQRUri); // Generate QR Code
                }
                else
                {
                    ErrorMessage = "Failed to retrieve TOTP information.";
                }

                // Reset form and navigate
                if (SelectedRole == "Admin")
                {
                    NewAdmin = new RegisterAdminUserDto();
                }
                else
                {
                    NewUser = new RegisterUserDto();
                }
                StateHasChanged();
                // navigationManager.NavigateTo("/manage-users", true, false); // Removed: Navigate only after successful QR Code display
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An unexpected error occurred: " + ex.Message;
        }
    }

    private void GenerateQRCode(string qrCodeData)
    {
        using (QRCodeGenerator qrGenerator = new QRCodeGenerator())
        {
            QRCodeData qrCodeDataModel = qrGenerator.CreateQrCode(qrCodeData, QRCoder.QRCodeGenerator.ECCLevel.Q);
            using (PngByteQRCode qrCode = new PngByteQRCode(qrCodeDataModel))
            {
                byte[] qrCodeImage = qrCode.GetGraphic(20);
                TotpQRUri = "data:image/png;base64," + Convert.ToBase64String(qrCodeImage);
                StateHasChanged(); // Update the UI
            }
            // using (QRCode qrCode = new QRCode(qrCodeDataModel))
            // {
            //     using (System.Drawing.Bitmap qrCodeBitmap = qrCode.GetGraphic(20)) Adjust size as needed
            //     {
            //         using (MemoryStream ms = new MemoryStream())
            //         {
            //             qrCodeBitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Png); Or Jpeg
            //             byte[] byteImage = ms.ToArray();
            //             TotpQRUri = "data:image/png;base64," + Convert.ToBase64String(byteImage);
            //             StateHasChanged(); Update the UI
            //         }
            //     }
            // }
        }
    }
}
