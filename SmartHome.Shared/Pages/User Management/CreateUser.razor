@page "/create-user"
@using SmartHome.Dto.Area
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Web
@layout MainLayout
@using QRCoder
@using System.IO

<AuthorizeView>
    <Authorized>
        @{
            IsAdmin = context.User.IsInRole("Admin");
        }

        <div class="max-w-4xl mx-auto p-4 sm:p-6 lg:p-8">
            <h3 class="text-2xl font-bold text-gray-900 mb-6">Create User</h3>

            <EditForm Context="userCreationContext" Model="@(SelectedRole == "Admin" ? NewAdmin : NewUser)" OnValidSubmit="SubmitCreateUserForm" class="space-y-6">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-red-600 mb-4" />

                @if (IsAdmin)
                {
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Role:</label>
                        <select @bind="SelectedRole" class="mt-1 block w-full rounded-md border border-gray-300 bg-white py-2 px-3 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm">
                            <option value="Admin">Admin</option>
                            <option value="User">Normal User</option>
                            <option value="Guest">Guest</option>
                        </select>
                    </div>
                }

                <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                    @if (SelectedRole == "Admin")
                    {
                        <div class="space-y-2">
                            <label class="block text-sm font-medium text-gray-700">Username:</label>
                            <InputText @bind-Value="NewAdmin.Username" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 valid" />
                        </div>
                        <div class="space-y-2">
                            <label class="block text-sm font-medium text-gray-700">First Name:</label>
                            <InputText @bind-Value="NewAdmin.FirstName" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 valid" />
                        </div>
                        <div class="space-y-2">
                            <label class="block text-sm font-medium text-gray-700">Last Name:</label>
                            <InputText @bind-Value="NewAdmin.LastName" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 valid" />
                        </div>
                        <div class="space-y-2">
                            <label class="block text-sm font-medium text-gray-700">Email:</label>
                            <InputText @bind-Value="NewAdmin.Email" type="email" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 valid" />
                        </div>
                        <div class="space-y-2">
                            <label class="block text-sm font-medium text-gray-700">Password:</label>
                            <InputText @bind-Value="NewAdmin.Password" type="password" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 valid" />
                        </div>
                    }
                    else
                    {
                        <div class="space-y-2">
                            <label class="block text-sm font-medium text-gray-700">Username:</label>
                            <InputText @bind-Value="NewUser.Username" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 valid" />
                        </div>
                        <div class="space-y-2">
                            <label class="block text-sm font-medium text-gray-700">First Name:</label>
                            <InputText @bind-Value="NewUser.FirstName" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 valid" />
                        </div>
                        <div class="space-y-2">
                            <label class="block text-sm font-medium text-gray-700">Last Name:</label>
                            <InputText @bind-Value="NewUser.LastName" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 valid" />
                        </div>
                        <div class="space-y-2">
                            <label class="block text-sm font-medium text-gray-700">Password:</label>
                            <InputText @bind-Value="NewUser.Password" type="password" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 valid" />
                        </div>
                    }
                </div>

                @if (SelectedRole != "Admin")
                {
                    <div class="mt-6 space-y-4">
                        <div class="flex justify-between items-center">
                            <h5 class="text-lg font-medium">Allowed Areas</h5>
                            <button type="button" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500" @onclick="ShowModal">
                                Add Area
                            </button>
                        </div>

                        <div class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Area Name</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">
                                    @foreach (var area in areas)
                                    {
                                        if (NewUser.AllowedAreas.Contains(area.Id))
                                        {
                                            <tr>
                                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@area.Name</td>
                                                <td class="px-6 py-4 whitespace-nowrap text-sm">
                                                    <button type="button" class="text-red-600 hover:text-red-900" @onclick="() => RemoveArea(area.Id)">
                                                        Remove
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="rounded-md bg-red-50 p-4">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm font-medium text-red-800">@ErrorMessage</h3>
                            </div>
                        </div>
                    </div>
                }

                <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Create User
                </button>
            </EditForm>

            @if (!string.IsNullOrEmpty(TotpQRUri))
            {
                <div class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center">
                    <div class="bg-white p-8 rounded-lg max-w-md w-full mx-4">
                        <div class="text-center space-y-4">
                            <h3 class="text-lg font-medium">2FA Setup Required</h3>
                            <img id="qrcodeImage" src="@TotpQRUri" alt="TOTP QR Code" class="mx-auto w-48 h-48" />
                            <p class="text-sm text-gray-600">Scan this QR code with your authenticator app</p>
                            <div class="mt-2 bg-gray-100 p-3 rounded-md">
                                <code class="text-sm break-all select-text">@SecretKey</code>
                            </div>
                            <button @onclick="@(x => navigationManager.NavigateTo("/manage-users"))"
                                    class="mt-4 w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:text-sm">
                                Done
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="text-center p-8">
            <p class="text-red-600">You are not authorized to create users.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@if (IsModalVisible)
{
    <div class="fixed inset-0 z-50 overflow-y-auto">
        <div class="flex min-h-screen items-end justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 transition-opacity" aria-hidden="true">
                <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
            </div>

            <span class="hidden sm:inline-block sm:h-screen sm:align-middle" aria-hidden="true">&#8203;</span>

            <div class="inline-block align-middle bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all w-full max-w-lg mx-4 my-8">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-medium leading-6 text-gray-900">Select Area</h3>
                        <button @onclick="CloseModal" class="text-gray-400 hover:text-gray-500">
                            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                    <ul class="divide-y divide-gray-200 max-h-96 overflow-y-auto">
                        @foreach (var area in areas)
                        {
                            <li class="flex justify-between items-center py-3 px-4 hover:bg-gray-50">
                                <span class="text-sm text-gray-900">@area.Name</span>
                                <button @onclick="() => AddArea(area.Id)" 
                                        class="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700">
                                    Add
                                </button>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
}


@code {


    private RegisterUserDto NewUser = new();
    private RegisterAdminUserDto NewAdmin = new();
    private List<AreaDto> areas = new List<AreaDto>();
    private bool IsAdmin;
    private string SelectedRole;
    private bool IsModalVisible = false;
    private string ErrorMessage = string.Empty;

    private string TotpQRUri = string.Empty;
    private string SecretKey = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SelectedRole = IsAdmin ? "Admin" : "User";
        var result = await ApiService.GetAsync("/api/area/get/all");
        if (result.IsSuccessStatusCode)
        {
            areas = await result.Content.ReadFromJsonAsync<List<AreaDto>>()!;
        }
        else
        {
            ErrorMessage = "Failed to load areas.";
        }
    }

    private void ShowModal() => IsModalVisible = true;
    private void CloseModal() => IsModalVisible = false;

    private void AddArea(Guid areaId)
    {
        if (!NewUser.AllowedAreas.Contains(areaId))
        {
            NewUser.AllowedAreas.Add(areaId);
        }
        CloseModal();
        StateHasChanged();
    }

    private void RemoveArea(Guid areaId)
    {
        NewUser.AllowedAreas.Remove(areaId);
        StateHasChanged();
    }

    private async Task SubmitCreateUserForm()
    {
        try
        {
            HttpResponseMessage result = SelectedRole == "Admin"
                ? await ApiService.PostAsync<RegisterAdminUserDto>("/api/user/create/admin", NewAdmin)
                : await ApiService.PostAsync<RegisterUserDto>($"/api/user/create/{SelectedRole.ToLower()}", NewUser);

            if (!result.IsSuccessStatusCode)
            {
                var response = await result.Content.ReadFromJsonAsync<ApiResponse<object>>();
                if (response?.Data is JsonElement jsonElement && jsonElement.ValueKind == JsonValueKind.Array)
                {
                    var errors = JsonSerializer.Deserialize<List<string>>(jsonElement.GetRawText());
                    foreach (var error in errors)
                    {
                        toastService.Notify(new ToastMessage(ToastType.Danger, IconName.Bug, "Error", error));
                    }
                }
                else
                {
                    ErrorMessage = "User creation failed: " + response?.Data;
                }
            }
            else
            {
                toastService.Notify(new ToastMessage(ToastType.Success, IconName.HandThumbsUp, "User Created Successfully", "The User was Created Successfully"));
                var response = await result.Content.ReadFromJsonAsync<ApiResponse<Dictionary<string, string>>>();//Changed to Dictionary
                if (response != null && response.Data != null)
                {
                    TotpQRUri = response.Data["totpQRUri"];//access by key
                    SecretKey = response.Data["secretKey"];
                    GenerateQRCode(TotpQRUri); // Generate QR Code
                }
                else
                {
                    ErrorMessage = "Failed to retrieve TOTP information.";
                }

                // Reset form and navigate
                if (SelectedRole == "Admin")
                {
                    NewAdmin = new RegisterAdminUserDto();
                }
                else
                {
                    NewUser = new RegisterUserDto();
                }
                StateHasChanged();
                // navigationManager.NavigateTo("/manage-users", true, false); // Removed: Navigate only after successful QR Code display
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An unexpected error occurred: " + ex.Message;
        }
    }

    private void GenerateQRCode(string qrCodeData)
    {
        using (QRCodeGenerator qrGenerator = new QRCodeGenerator())
        {
            QRCodeData qrCodeDataModel = qrGenerator.CreateQrCode(qrCodeData, QRCoder.QRCodeGenerator.ECCLevel.Q);
            using (PngByteQRCode qrCode = new PngByteQRCode(qrCodeDataModel))
            {
                byte[] qrCodeImage = qrCode.GetGraphic(20);
                TotpQRUri = "data:image/png;base64," + Convert.ToBase64String(qrCodeImage);
                StateHasChanged(); // Update the UI
            }
            // using (QRCode qrCode = new QRCode(qrCodeDataModel))
            // {
            //     using (System.Drawing.Bitmap qrCodeBitmap = qrCode.GetGraphic(20)) Adjust size as needed
            //     {
            //         using (MemoryStream ms = new MemoryStream())
            //         {
            //             qrCodeBitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Png); Or Jpeg
            //             byte[] byteImage = ms.ToArray();
            //             TotpQRUri = "data:image/png;base64," + Convert.ToBase64String(byteImage);
            //             StateHasChanged(); Update the UI
            //         }
            //     }
            // }
        }
    }
}
