@page "/manage-devices"
@using System.Text.Json
@using SmartHome.Dto.Device
@layout MainLayout

<PageTitle>Manage Devices</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (!context.User.IsInRole("Admin"))
        {
            navigationManager.NavigateTo("/overview");
            toastService.Notify(new(ToastType.Warning, IconName.ExclamationTriangle, "Not Authorized", "You are NOT Authorized to be Here"));
        }
        <div class="flex justify-between items-center mb-6 px-4">
            <h3 class="text-2xl font-semibold text-gray-800">Manage devices</h3>
            <button class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white"
            style="background-color:var(--primary)"
            onmouseover="this.style.opacity='0.85'"
            onmouseout="this.style.opacity='1'"
            @onclick="NavigateTodeviceCreation">
                <i class="fas fa-plus mr-2"></i>New device
            </button>
        </div>

        <div class="bg-white rounded-xl shadow-sm overflow-hidden">
            <div class="overflow-x-auto rounded-lg shadow-sm border border-gray-200">
            @if (isLoading)
            {
                <div class="text-center py-12">
                    <p>Loading Devices</p>
                        <div class="flex justify-center align-center mt-2" role="status">
                        <svg aria-hidden="true" class="inline w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-purple-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                            <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="#7e6ab2" />
                        </svg>
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                @if (devices.Count == 0)
                {
                    <div class="text-center mt-12 p-8 bg-gray-50 rounded-xl">
                        <p>There are no devices here yet.</p>
                        <button class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white"
                                style="background-color:var(--primary)"
                                onmouseover="this.style.opacity='0.85'"
                                onmouseout="this.style.opacity='1'"
                                @onclick="NavigateTodeviceCreation">
                            Create New device
                        </button>
                    </div>
                }
                else
                {

                        <table class="w-full min-w-[800px]">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Brand</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Manufacturer</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Updated</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var device in devices)
                            {
                                <tr class="hover:bg-gray-50 transition-colors">
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@device.Name</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@device.Brand</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@device.Manufacturer</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@device.DeviceType.Name</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@device.LastUpdated</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm space-x-2">
                                        <button class="px-3 py-1.5  text-white rounded-md hover:bg-blue-700 transition-colors" style="background-color:var(--primary)"
                                                @onclick="@(() => navigationManager.NavigateTo($"/edit-device/{device.Id.ToString()}"))">
                                            Edit
                                        </button>
                                        <button class="px-3 py-1.5 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
                                                @onclick="() => ConfirmDelete(device)">
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            }
            </div>
        </div>

        
    </Authorized>
    <NotAuthorized>
        @{
            navigationManager.NavigateTo("/");
            toastService.Notify(new(ToastType.Warning, IconName.ExclamationTriangle, "Not Authorized", "You are NOT Authorized to be Here"));
        }
    </NotAuthorized>
</AuthorizeView>

@if (showDeleteModal)
{
    <div class="fixed inset-0 z-50 overflow-y-auto">
        <div class="flex items-center justify-center min-h-screen px-4 text-center">
            <!-- الخلفية المعتمة -->
            <div class="fixed inset-0 transition-opacity" aria-hidden="true">
                <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
            </div>

            <!-- محتوى الـ Modal -->
            <div class="inline-block align-middle bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all w-full max-w-lg mx-4 my-8">
                <!-- محتوى النص -->
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                            <h3 class="text-lg leading-6 font-medium text-gray-900">Confirm Deletion</h3>
                            <div class="mt-2">
                                <p class="text-sm text-gray-500">Are you sure you want to delete @selecteddevice?.Name?</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- الأزرار -->
                <div class="bg-gray-50 px-4 py-3 flex flex-col-reverse sm:flex-row sm:justify-end gap-3">
                    <button type="button"
                    class="w-full sm:w-auto inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none sm:text-sm"
                    @onclick="CloseDeleteModal">
                        Cancel
                    </button>
                    <button type="button"
                    class="w-full sm:w-auto inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none sm:text-sm"
                    @onclick="Deletedevice">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    List<DeviceDto> devices = new List<DeviceDto>();
    private bool showDeleteModal = false;
    private DeviceDto? selecteddevice;

    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        await base.OnInitializedAsync();
        var result = await ApiService.GetAsync("api/device/get/all");
        if (result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadFromJsonAsync<List<DeviceDto>>();
            devices = content;
        }
        else
        {
            // Show error message in toast
        }

        isLoading = false;
    }

    private void NavigateTodeviceCreation()
    {
        navigationManager.NavigateTo("/create-device");
    }

    private void ConfirmDelete(DeviceDto device)
    {
        selecteddevice = device;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        selecteddevice = null;
    }

    private async Task Deletedevice()
    {
        if (selecteddevice != null)
        {
            var result = await ApiService.SendAsync<object>(HttpMethod.Delete, $"api/device/delete/{selecteddevice.Id}");
            if (result.IsSuccessStatusCode)
            {
                devices.Remove(selecteddevice);
				toastService.Notify(new(ToastType.Success, IconName.CheckCircle, "Success", $"{selecteddevice.Name} has been deleted successfully"));
            }
            else
            {
                // Show error message in toast
				toastService.Notify(new(ToastType.Danger, IconName.Bug, "Error", $"Failed to delete {selecteddevice.Name}"));
            }
            showDeleteModal = false;
            selecteddevice = null;
        }
    }
}