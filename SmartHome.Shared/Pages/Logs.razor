<!-- sohila design -->
@page "/logs"
@layout MainLayout

@using System

<div class="p-2 sm:p-6 bg-gray-100 min-h-screen">
    <!-- Filter Buttons -->
    <div class="flex flex-wrap gap-3 sm:space-x-4 sm:flex-nowrap mb-6 justify-center sm:justify-start">
        @foreach (var type in Enum.GetValues<LogType>())
        {
            <button class="px-4 py-2 rounded-full shadow text-sm sm:text-base transition-all duration-200
                       @(SelectedType == type ? ActiveButtonClass(type) : InactiveButtonClass(type))"
                    @onclick="() => FilterLogs(type)">
                @type
            </button>
        }
    </div>

    <!-- Log Cards -->
    <div class="space-y-4 bg-white p-4 rounded-xl shadow-md border">
        @foreach (var log in FilteredLogs)
        {
            <div class="bg-gray-50 rounded-lg shadow-sm p-4 border">
                <div class="text-gray-800 font-medium text-sm sm:text-base">@log.Message</div>
                <div class="text-xs sm:text-sm text-gray-600 mt-1">
                    by User: <span class="font-semibold">@log.User</span>
                </div>
                <div class="text-xs text-gray-500 text-right mt-2">@log.TimeAgo</div>
            </div>
        }
    </div>
</div>

@code {
    enum LogType
    {
        Actions,
        Errors,
        Warning
    }

    class LogEntry
    {
        public string Message { get; set; }
        public string User { get; set; }
        public string TimeAgo { get; set; }
        public LogType Type { get; set; }
    }

    List<LogEntry> AllLogs = new()
    {
        new LogEntry { Message = "Lamp in Living Room Turned on", User = "Ahmed", TimeAgo = "2 hours ago", Type = LogType.Actions },
        new LogEntry { Message = "Failed to connect to thermostat", User = "System", TimeAgo = "3 hours ago", Type = LogType.Errors },
        new LogEntry { Message = "Battery low in sensor", User = "System", TimeAgo = "5 hours ago", Type = LogType.Warning },
        new LogEntry { Message = "Fan turned off", User = "Fatma", TimeAgo = "10 minutes ago", Type = LogType.Actions }
    };

    List<LogEntry> FilteredLogs = new();
    LogType SelectedType = LogType.Actions;

    protected override void OnInitialized()
    {
        FilterLogs(SelectedType);
    }

    void FilterLogs(LogType type)
    {
        SelectedType = type;
        FilteredLogs = AllLogs.Where(log => log.Type == type).ToList();
    }

    string ActiveButtonClass(LogType type) =>
        type switch
        {
            LogType.Actions => "bg-gray-800 text-white",
            LogType.Errors => "bg-red-500 text-white",
            LogType.Warning => "bg-yellow-400 text-black",
            _ => ""
        };

    string InactiveButtonClass(LogType type) =>
        type switch
        {
            LogType.Actions => "bg-gray-300 text-gray-800",
            LogType.Errors => "bg-red-300 text-white",
            LogType.Warning => "bg-yellow-200 text-yellow-900",
            _ => ""
        };
}


























@* my style *@
@* @page "/logs" *@
@* @layout MainLayout *@

@* @using System *@

@* <div class="p-4 sm:p-6 md:p-10 bg-gray-100 min-h-screen"> *@
@*     <!-- Filter Buttons --> *@
@*     <div class="flex flex-wrap gap-3 mb-6 justify-center sm:justify-start"> *@
@*         @foreach (var type in Enum.GetValues<LogType>()) *@
@*         { *@
@*             <button class="px-4 py-2 rounded-full shadow text-sm sm:text-base transition-all duration-200 *@
@*                        @(SelectedType == type ? ActiveButtonClass(type) : InactiveButtonClass(type))" *@
@*                     @onclick="() => FilterLogs(type)"> *@
@*                 @type *@
@*             </button> *@
@*         } *@
@*     </div> *@

@*     <!-- Log Cards Container --> *@
@*     <div class="grid gap-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3"> *@
@*         @foreach (var log in FilteredLogs) *@
@*         { *@
@*             <div class="bg-white rounded-xl shadow-md border p-4 flex flex-col justify-between"> *@
@*                 <div> *@
@*                     <div class="text-gray-800 font-semibold text-base sm:text-lg">@log.Message</div> *@
@*                     <div class="text-sm text-gray-600 mt-1">by User: <span class="font-semibold">@log.User</span></div> *@
@*                 </div> *@
@*                 <div class="text-xs text-gray-500 text-right mt-2">@log.TimeAgo</div> *@
@*             </div> *@
@*         } *@
@*     </div> *@
@* </div> *@

@* @code { *@
@*     enum LogType *@
@*     { *@
@*         Actions, *@
@*         Errors, *@
@*         Warning *@
@*     } *@

@*     class LogEntry *@
@*     { *@
@*         public string Message { get; set; } *@
@*         public string User { get; set; } *@
@*         public string TimeAgo { get; set; } *@
@*         public LogType Type { get; set; } *@
@*     } *@

@*     List<LogEntry> AllLogs = new() *@
@*     { *@
@*         new LogEntry { Message = "Lamp in Living Room Turned on", User = "Ahmed", TimeAgo = "2 hours ago", Type = LogType.Actions }, *@
@*         new LogEntry { Message = "Failed to connect to thermostat", User = "System", TimeAgo = "3 hours ago", Type = LogType.Errors }, *@
@*         new LogEntry { Message = "Battery low in sensor", User = "System", TimeAgo = "5 hours ago", Type = LogType.Warning }, *@
@*         new LogEntry { Message = "Fan turned off", User = "Fatma", TimeAgo = "10 minutes ago", Type = LogType.Actions } *@
@*     }; *@

@*     List<LogEntry> FilteredLogs = new(); *@
@*     LogType SelectedType = LogType.Actions; *@

@*     protected override void OnInitialized() *@
@*     { *@
@*         FilterLogs(SelectedType); *@
@*     } *@

@*     void FilterLogs(LogType type) *@
@*     { *@
@*         SelectedType = type; *@
@*         FilteredLogs = AllLogs.Where(log => log.Type == type).ToList(); *@
@*     } *@

@*     string ActiveButtonClass(LogType type) => *@
@*         type switch *@
@*         { *@
@*             LogType.Actions => "bg-gray-800 text-white", *@
@*             LogType.Errors => "bg-red-500 text-white", *@
@*             LogType.Warning => "bg-yellow-400 text-black", *@
@*             _ => "" *@
@*         }; *@

@*     string InactiveButtonClass(LogType type) => *@
@*         type switch *@
@*         { *@
@*             LogType.Actions => "bg-gray-300 text-gray-800 hover:bg-gray-400", *@
@*             LogType.Errors => "bg-red-200 text-red-800 hover:bg-red-300", *@
@*             LogType.Warning => "bg-yellow-200 text-yellow-900 hover:bg-yellow-300", *@
@*             _ => "" *@
@*         }; *@
@* } *@
