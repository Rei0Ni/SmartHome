@page "/login"
@using SmartHome.Shared.Models.Auth
@layout AuthLayout

@inject ISecureStorageService secureStorageService

<AuthorizeView>
    <NotAuthorized>
        <!-- Link fontawesome -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
        <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

        <div class="logoSmartHome">
            <img src="_content/SmartHome.Shared/imgs/logoTest2.png" alt="logo" />
        </div>

        <div class="text">
            Login
        </div>
        <div class="sub-text">
        </div>
        <form @onsubmit="HandleLogin">
            <div class="data">
                <input type="text" class="text-black" placeholder="username" @bind="LoginModel.Username">
                @if (!string.IsNullOrEmpty(usernameErrorMessage))
                {
                    <p class="error-message">@usernameErrorMessage</p>
                }
            </div>

            <div class="data relative mt-4">
                <input type="@(showPassword ? "text" : "password")"
                placeholder="password"
                @bind="LoginModel.Password"
                class="w-full pl-3 pr-10 py-2 border rounded-lg focus:outline-none focus:border-blue-500 text-black">

                <i class="absolute right-4 top-4 -translate-y-1/2 text-gray-400 cursor-pointer
              fas @(showPassword ? "fa-eye-slash" : "fa-eye")"
                @onclick="TogglePasswordVisibility"></i>

                @if (!string.IsNullOrEmpty(passwordErrorMessage))
                {
                    <p class="error-message">@passwordErrorMessage</p>
                }
            </div>

            <div class="forgot-pass">
                <a href="#">Forgot Password?</a>
            </div>
            <div class="LoginBtn">
                <button type="submit">Sign in</button>
            </div>
        </form>
    </NotAuthorized>
    <Authorized>
        @{
            navigationManager.NavigateTo("/overview", true);
        }
    </Authorized>
</AuthorizeView>

@code {
    private Dto.User.LoginDto LoginModel = new();
    private string usernameErrorMessage;
    private string passwordErrorMessage;

    private string PrimaryHostname { get; set; } = "";
    private string SecondaryHostname { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var Hostnames = await secureStorageService.GetHostnamesAsync();

        PrimaryHostname = Hostnames.Item1 ?? "";
        SecondaryHostname = Hostnames.Item2 ?? "";
    }

    private async Task HandleLogin()
    {
        usernameErrorMessage = null;
        passwordErrorMessage = null;
        bool hasError = false;

        if (string.IsNullOrWhiteSpace(LoginModel.Username))
        {
            ShowUsernameError("Please fill user name.");
            hasError = true;
        }
        if (string.IsNullOrWhiteSpace(LoginModel.Password))
        {
            ShowPasswordError("Please fill password.");
            hasError = true;
        }

        if (hasError)
        {
            return;
        }

        var result = await authStateProvider.Login(LoginModel);
        if (result.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("/");
        }
        else if (result.StatusCode == HttpStatusCode.BadRequest)
        {
            var ErrorResposne = await result.Content.ReadFromJsonAsync<ApiResponse<List<LoginErrorResponse>>>();
            Console.WriteLine(ErrorResposne.Message.ToString());
            toastService.Notify(new(ToastType.Danger, IconName.Bug, "Login Failed", ErrorResposne.Message));
        }
        else if (result.StatusCode == HttpStatusCode.Unauthorized)
        {
            var ErrorResposne = await result.Content.ReadFromJsonAsync<ApiResponse<object>>();
            Console.WriteLine(ErrorResposne.Message.ToString());
            toastService.Notify(new(ToastType.Danger, IconName.Bug, "Login Failed", ErrorResposne.Message));
        }
    }

    private void ShowUsernameError(string message)
    {
        usernameErrorMessage = message;
    }

    private void ShowPasswordError(string message)
    {
        passwordErrorMessage = message;
    }


    private bool showPassword = false;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

}