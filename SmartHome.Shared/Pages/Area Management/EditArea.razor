@page "/edit-area/{Id}"
@using SmartHome.Dto.Area
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Web
@using SmartHome.Dto.Controller
@layout MainLayout

<PageTitle>Edit Area</PageTitle>

<AuthorizeView>
    <Authorized>
        @{
            IsAdmin = context.User.IsInRole("Admin");
        }

        <div class="max-w-4xl mx-auto bg-white rounded-lg shadow-sm border border-gray-200">
            <div class="px-6 py-5 border-b border-gray-200">
                <h3 class="text-xl sm:text-2xl font-bold text-gray-800">Edit area</h3>
                <p class="text-gray-600 mt-2 text-sm sm:text-base">Fill in the details below to update the area</p>
            </div>

            <EditForm Context="AreaEditContext"
            Model="NewArea"
            OnValidSubmit="SubmitUpdateAreaForm"
            class="p-6 md:p-8">
                <DataAnnotationsValidator />

                <div class="space-y-4 sm:space-y-6">
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
                        <!-- Name -->
                        <div>
                            <label for="areaName" class="block text-sm sm:text-base font-medium text-gray-700 mb-1">Area Name</label>
                            <div class="mt-1">
                                <InputText id="areaName" @bind-Value="NewArea.Name"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                placeholder="Enter area name" />
                                <ValidationMessage For="@(() => NewArea.Name)"
                                class="text-red-600 text-sm mt-1" />
                            </div>
                        </div>


                        <!-- Controller Selection -->
                        <div>
                            <label class="block text-sm sm:text-base font-medium text-gray-700 mb-1">Select Controller</label>
                            @if (!Controllers.Any())
                            {
                                <p class="text-sm text-gray-500 italic mt-1">No controllers available to select.</p>
                            }
                            else
                            {
                                @* --- Option 1: Radio Buttons (Recommended for clarity if list isn't huge) --- *@
                                @* <InputRadioGroup @bind-Value="NewArea.ControllerId" class="mt-2 space-y-3"> *@
                                @*     <ValidationMessage For="@(() => NewArea.ControllerId)" class="text-red-600 text-sm mb-2" /> *@
                                @*     @foreach (var controller in Controllers) *@
                                @*     { *@
                                @*         <div class="flex items-center p-3 border border-gray-200 rounded-md hover:bg-gray-50 transition duration-150 ease-in-out"> *@
                                @*             <InputRadio id="@($"controller-{controller.Id}")" Value="controller.Id" class="h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500" /> *@
                                @*             <label for="@($"controller-{controller.Id}")" class="ml-3 flex flex-col cursor-pointer"> *@
                                @*                 <span class="block text-sm font-medium text-gray-900">@controller.Name</span> *@
                                @*                 <span class="block text-sm text-gray-500">MAC: @controller.MACAddress</span> *@
                                @*             </label> *@
                                @*         </div> *@
                                @*     } *@
                                @* </InputRadioGroup> *@

                                @* --- Option 2: Dropdown (InputSelect) - Uncomment to use --- *@
                                <div class="mt-1">
                                    <InputSelect @bind-Value="NewArea.ControllerId" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                        <option value="@Guid.Empty.ToString()">-- Select a Controller --</option>
                                        @foreach (var controller in Controllers)
                                        {
                                            <option value="@controller.Id">@controller.Name (@controller.MACAddress)</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => NewArea.ControllerId)" class="text-red-600 text-sm mt-1" />
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Error Message -->
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="bg-red-50 border-l-4 border-red-400 p-4 mt-4">
                            <div class="flex">
                                <div class="flex-shrink-0">
                                    @* Assuming Font Awesome is available via MainLayout or similar *@
                                    <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm-1.707-4.293a1 1 0 001.414 1.414L10 11.414l.293.293a1 1 0 001.414-1.414L11.414 10l.293-.293a1 1 0 00-1.414-1.414L10 8.586 9.707 8.293a1 1 0 00-1.414 1.414L8.586 10l-.293.293a1 1 0 000 1.414z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                                <div class="ml-3">
                                    <p class="text-sm text-red-700">@ErrorMessage</p>
                                </div>
                            </div>
                        </div>
                    }

                    <!-- Submit Button -->
                    <div class="pt-4 sm:pt-6">
                        <button type="submit"
                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        style="background-color:var(--primary)"
                        onmouseover="this.style.opacity='0.85'"
                        onmouseout="this.style.opacity='1'">
                            <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                            Edit Area
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="text-center p-6 sm:p-8">
            <div class="mx-auto max-w-md">
                <i class="fas fa-ban text-red-500 text-3xl sm:text-4xl mb-4"></i>
                <h3 class="text-lg sm:text-xl font-semibold text-gray-800 mb-2">Unauthorized Access</h3>
                <p class="text-gray-600 text-sm sm:text-base">You don't have permission to edit areas</p>
                <p class="text-gray-600 text-sm sm:text-base">You don't have permission to edit areas</p>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private UpdateAreaDto NewArea = new();
    private List<ControllerDto> Controllers = new();

    private bool IsAdmin;
    private string ErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var result = await ApiService.GetAsync($"/api/area/get/{Id}");
        if (result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadFromJsonAsync<AreaDto>();
            if (content != null)
            {
                NewArea.Name = content.Name;
                NewArea.ControllerId = content.ControllerId;
            }
            else
            {
                toastService.Notify(new ToastMessage(ToastType.Danger, IconName.Bug, "Failed to load area data.", "Couldn't load the area Data"));
            }
        }
        else
        {
            toastService.Notify(new ToastMessage(ToastType.Danger, IconName.Bug, "Failed to load area data.", "Couldn't load the area Data"));
        }

        try
        {
            var controllerResult = await ApiService.GetAsync("/api/controller/get/all");
            if (controllerResult.IsSuccessStatusCode)
            {
                Controllers = await controllerResult.Content.ReadFromJsonAsync<List<ControllerDto>>() ?? new List<ControllerDto>();
            }
            else
            {
                var errorContent = await controllerResult.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to load controllers: {controllerResult.StatusCode} - {errorContent}"); // Log detailed error
                ErrorMessage = $"Failed to load controllers (Status: {controllerResult.StatusCode}). Please check logs or try again.";
                Controllers = new List<ControllerDto>(); // Ensure controllers list is empty on failure
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception loading controllers: {ex}"); // Log detailed exception
            ErrorMessage = "An error occurred while loading controller data. Please try again later.";
            Controllers = new List<ControllerDto>(); // Ensure controllers list is empty on exception
        }
    }

    private async Task SubmitUpdateAreaForm()
    {
        try
        {
            NewArea.Id = Guid.Parse(Id);
            HttpResponseMessage result = await ApiService.SendAsync<UpdateAreaDto>(HttpMethod.Put, "/api/area/update", NewArea);

            if (result.StatusCode == HttpStatusCode.NoContent)
            {
                toastService.Notify(new ToastMessage(ToastType.Success, IconName.HandThumbsUp, "Area Updated Successfully", "The Area was Updated Successfully"));
                NewArea = new UpdateAreaDto();
                StateHasChanged();
                navigationManager.NavigateTo("/manage-areas", false, false);
            }
            else
            {
				var response = await result.Content.ReadFromJsonAsync<ApiResponse<object>>();
				if (response?.Data is JsonElement jsonElement && jsonElement.ValueKind == JsonValueKind.Array)
				{
					var errors = JsonSerializer.Deserialize<List<string>>(jsonElement.GetRawText());
					foreach (var error in errors)
					{
						toastService.Notify(new ToastMessage(ToastType.Danger, IconName.Bug, "Error", error));
					}
				}
				else
				{
					ErrorMessage = "Area update failed: " + response?.Data;
				}
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An unexpected error occurred: " + ex.Message;
        }
    }
}
