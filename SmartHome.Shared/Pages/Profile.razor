@page "/profile"
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms;
@using System.IO;
@using QRCoder
@using SmartHome.Dto.Totp
@using System.Net.Http.Headers

@layout MainLayout

<PageTitle>Profile</PageTitle>

<AuthorizeView>
	<Authorized>
		@{
			IsAdmin = context.User.IsInRole("Admin");
		}
		<div class="mx-auto bg-surface rounded-xl shadow-md overflow-hidden">
			<div class="p-6">
				<div class="w-full flex justify-between items-center mb-4">
					<!-- Avatar, Name & Email Section -->
					<div class="w-full flex justify-between items-center mb-2 sm:flex-row flex-col sm:space-y-0 space-y-4 sm:space-x-4">
						<!-- Avatar, Name & Email Section -->
						<div class="flex items-center space-y-4">
							<div class="relative group">
								<div class="w-24 h-24 sm:w-32 sm:h-32 flex items-center justify-center overflow-hidden relative">
									@if (profilePictureStream != null)
									{
										<img src="data:image/png;base64,@Convert.ToBase64String(profilePictureStream)"
											 class="w-full h-full object-cover rounded-full"
											 alt="User Avatar">
									}
									else
									{
										<svg class="w-12 h-12 sm:w-20 sm:h-20 text-gray-400 rounded-full" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
												  d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
										</svg>
									}
								</div>

								<!-- Pencil Icon (Label) -->
								<label for="file-upload" class="absolute bottom-0 z-50 right-0 bg-primary text-white rounded-full p-1 cursor-pointer">
									<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
										<path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828zM5 12.828V15h2.172l7.586-7.586-2.172-2.172L5 12.828z" />
									</svg>
								</label>

								<!-- Hidden InputFile -->
								<InputFile id="file-upload"
										   class="hidden"
										   OnChange="HandleFileUpload"
										   accept="image/*" />
							</div>

							<div class="flex flex-col items-center ms-3">
								@if (IsAdmin)
								{
									<h2 class="text-xl sm:text-2xl font-bold text-gray-900 dark:text-gray-50 text-center">@adminUser.FirstName @adminUser.LastName</h2>
									<p class="text-sm sm:text-base text-gray-600 dark:text-gray-200 text-center">@adminUser.Email</p>
								}
								else
								{
									<h2 class="text-xl sm:text-2xl font-bold text-gray-900 dark:text-gray-50 text-center">@user.FirstName @user.LastName</h2>
								}
							</div>
						</div>

						<!-- Edit Button -->
						<button @onclick="ToggleEdit"
						class="w-full sm:w-auto px-4 py-2 bg-primary text-white rounded-lg hover:bg-purple-700 transition-colors text-center">
							@(isEditing ? "Cancel" : "Edit Profile")
						</button>
					</div>

				</div>

				<!-- Common Grid Structure for All Screen Sizes -->
				<div class="grid grid-cols-1 gap-6">
					<!-- Dynamic Form Section -->
					<EditForm Context="editUserProfile" Model="@(IsAdmin ? newAdminProfile : newUserProfile)"
					OnValidSubmit="SaveChanges"
					class="space-y-4">
						<div class="grid grid-cols-1 gap-4">
							@if (IsAdmin)
							{
								<div>
									<label class="block text-sm font-medium text-gray-700 dark:text-gray-50 mb-1">First Name</label>
									<InputText @bind-Value="newAdminProfile.FirstName"
										disabled="@(!isEditing)"
										class="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-purple-500 dark:bg-white" />
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-700 dark:text-gray-50 mb-1">Last Name</label>
									<InputText @bind-Value="newAdminProfile.LastName"
										disabled="@(!isEditing)"
										class="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-purple-500 dark:bg-white" />
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-700 dark:text-gray-50 mb-1">Email</label>
									<InputText @bind-Value="newAdminProfile.Email"
										disabled="@(!isEditing)"
										class="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-purple-500 dark:bg-white" />
								</div>
							}
							else
							{
								<div>
									<label class="block text-sm font-medium text-gray-700 dark:text-gray-50 mb-1">First Name</label>
									<InputText @bind-Value="newUserProfile.FirstName"
										disabled="@(!isEditing)"
										class="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-purple-500 dark:bg-white" />
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-700 dark:text-gray-50 mb-1">Last Name</label>
									<InputText @bind-Value="newUserProfile.LastName"
										disabled="@(!isEditing)"
										class="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-purple-500 dark:bg-white" />
								</div>
							}
						</div>

						@if (isEditing)
						{
							<div class="grid grid-cols-1 sm:grid-cols-2 gap-3 mt-8">
								<button type="button" @onclick="CancelEdit"
								class="w-full px-4 py-2 text-gray-700 bg-gray-100 dark:bg-gray-600 dark:text-gray-50 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors cursor-pointer">
									Cancel
								</button>
								<button type="submit"
								class="w-full px-4 py-2 bg-primary text-white rounded-lg hover:bg-purple-700 transition-colors cursor-pointer">
									Save Changes
								</button>
							</div>
						}
					</EditForm>
				</div>

				<!-- TOTP Section -->
				<div class="mt-6 bg-gray-100 dark:bg-gray-300 rounded-lg shadow-md">
					<h3 class="text-base font-semibold text-gray-800 p-6 m-0 flex items-center justify-between cursor-pointer" @onclick="ToggleTotpSection">
						<span>Two-Factor Authentication (TOTP)</span>  
						<svg class="w-5 h-5 text-gray-600 transform transition-transform duration-200" style="transform: rotate(@(isTotpSectionCollapsed ? 0 : 180)deg);" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">  
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />  
						</svg>  
					</h3>  
					@if (!isTotpSectionCollapsed)  
					{ 
						<div class="transition-all duration-300 overflow-hidden p-4" style="max-height: @(isTotpSectionCollapsed ? "0px" : "500px");">  
							<p class="text-sm text-gray-600 mb-4 sm:text-left">Scan the QR code below with your authenticator app to enable two-factor authentication.</p>  
							<div class="flex flex-col sm:flex-row items-center sm:items-start sm:ms-0 md:sm-0 mb-4 space-y-4 sm:space-y-0 sm:space-x-4">  
								<div class="flex justify-center sm:justify-start">  
									@if (!string.IsNullOrEmpty(totpQrCodeUrl))  
									{  
										<img src="@totpQrCodeUrl" alt="TOTP QR Code" class="w-40 h-40 sm:w-48 sm:h-48"/>  
									}  
									else  
									{  
										<p class="text-sm text-gray-500 text-center sm:text-left">QR code not available. Please try again later.</p>  
									}  
								</div>  
								<div class="p-4 sm:p-6 text-center sm:text-left">  
									<p class="text-sm text-gray-600">Your TOTP secret key: <span class="font-mono text-gray-800 select-text">@totpSecretKey</span></p>  
								</div>  
							</div>  
						</div>
					}
				</div>
			</div>
		</div>
	</Authorized>
	<NotAuthorized>
		<div class="max-w-3xl mx-auto bg-white rounded-xl shadow-md p-6 text-center text-red-600 mt-8">
			<svg class="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
			</svg>
			<p class="text-xl font-semibold">You are not authorized to view this page</p>
		</div>
	</NotAuthorized>
</AuthorizeView>


@code{

	private AdminUserDto adminUser = new AdminUserDto();
	private UserDto user = new UserDto();
	private UpdateAdminUserProfileDto newAdminProfile = new UpdateAdminUserProfileDto();
	private UpdateUserProfileDto newUserProfile = new UpdateUserProfileDto();
	private InputFile? profilePictureInput; // Marked as nullable to fix CS8618
	private IBrowserFile? selectedFile;
	private bool IsAdmin = false;
	private bool isEditing = false;
	private bool isUploading = false;

	private byte[]? profilePictureStream;

	private string totpQrCodeUrl = string.Empty;
	private string totpSecretKey = string.Empty;

	private bool isTotpSectionCollapsed = true;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		// Load user data based on the role
		HttpResponseMessage result = await ApiService.GetAsync("/api/user/get");
		if (!result.IsSuccessStatusCode)
		{
			// Handle error
		}
		else  
		{  
			var content = await result.Content.ReadFromJsonAsync<ApiResponse<JsonElement>>();
			if (content != null)  
			{  
				var root = content.Data;
				// Determine which DTO to use based on the presence of the 'email' property.
				if (root.TryGetProperty("email", out _))
				{
					adminUser = JsonSerializer.Deserialize<AdminUserDto>(
						root.GetRawText(),
						new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
					)!;
					newAdminProfile.Id = adminUser.Id.ToString();
					newAdminProfile.FirstName = adminUser.FirstName;
					newAdminProfile.LastName = adminUser.LastName;
					newAdminProfile.Email = adminUser.Email;
				}
				else
				{
					user = JsonSerializer.Deserialize<UserDto>(
						root.GetRawText(),
						new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
					)!;
					newUserProfile.Id = user.Id.ToString();
					newUserProfile.FirstName = user.FirstName;
					newUserProfile.LastName = user.LastName;
				}
			}  
		}
		await FetchProfilePicture();
		await FetchTotpInfo();
	}

	private async Task FetchProfilePicture()
	{
		try
		{
			var response = await ApiService.GetAsync(IsAdmin
				? "/api/user/get/profile-picture?admin=true"
				: "/api/user/get/profile-picture");

			if (response.IsSuccessStatusCode)
			{
				profilePictureStream = await response.Content.ReadAsByteArrayAsync();
			}
			else
			{
				profilePictureStream = null;
				// toastService.Notify(new(ToastType.Warning, "Profile Picture Not Found", "No profile picture available."));
			}
		}
		catch (Exception)
		{
			profilePictureStream = null;
			// toastService.Notify(new(ToastType.Danger, "Error", $"Failed to fetch profile picture."));
		}
	}

	private async Task FetchTotpInfo()
	{
		try
		{
			var response = await ApiService.GetAsync("/api/user/get/totp-info");
			if (response.IsSuccessStatusCode)
			{
				var result = await response.Content.ReadFromJsonAsync<ApiResponse<TotpInfoDto>>();
				if (result != null)
				{
					totpQrCodeUrl = result.Data?.TotpQRUri ?? string.Empty; // Added null check to fix CS8602
					totpSecretKey = result.Data?.SecretKey ?? string.Empty; // Added null check to fix CS8602
					GenerateQRCode(totpQrCodeUrl);
				}
			}
		}
		catch (Exception)
		{
			// Handle error (e.g., log or show a toast notification)
		}
	}

	private void GenerateQRCode(string qrCodeData)
	{
		using (QRCodeGenerator qrGenerator = new QRCodeGenerator())
		{
			QRCodeData qrCodeDataModel = qrGenerator.CreateQrCode(qrCodeData, QRCoder.QRCodeGenerator.ECCLevel.Q);
			using (PngByteQRCode qrCode = new PngByteQRCode(qrCodeDataModel))
			{
				byte[] qrCodeImage = qrCode.GetGraphic(20);
				totpQrCodeUrl = "data:image/png;base64," + Convert.ToBase64String(qrCodeImage);
				StateHasChanged(); // Update the UI
			}
		}
	}

	private void ToggleTotpSection()
	{
		isTotpSectionCollapsed = !isTotpSectionCollapsed;
	}

	private void ToggleEdit()
	{
		isEditing = !isEditing;
	}

	private void CancelEdit()
	{
		isEditing = false;
	}

	private async Task SaveChanges()
	{
		// Implement the logic to save changes
		isEditing = false;
		HttpResponseMessage response;
		if (IsAdmin)
		{
			response = await ApiService.SendAsync(HttpMethod.Put, "/api/user/update/admin", newAdminProfile);
		}
		else
		{
			response = await ApiService.SendAsync(HttpMethod.Put, "/api/user/update/", newUserProfile);
		}

		if (response.IsSuccessStatusCode)
		{
			toastService.ShowSuccess("User profile has been updated successfully");
			// navigationManager.NavigateTo("/manage-users");
			navigationManager.NavigateTo(navigationManager.Uri, true, false);
		}
		else
		{
			var responseContent = response.Content.ReadAsStringAsync();
			toastService.ShowError("Couldn't update user profile");
		}
	}

	private async Task HandleFileUpload(InputFileChangeEventArgs e)
	{
		var file = e.File;
		if (file == null) return;

		// Validate file
		if (!file.ContentType.Contains("image/"))
		{
			toastService.ShowWarning("Please select an image file");
			return;
		}

		// Limit file size to 5MB
		const int maxFileSize = 5 * 1024 * 1024;
		if (file.Size > maxFileSize)
		{
			toastService.ShowWarning("Maximum file size is 5MB");
			return;
		}

		selectedFile = e.File;

		await UploadFile();
	}

	// Method to trigger the upload
	private async Task UploadFile()
	{
		if (selectedFile == null)
		{
			return;
		}

		try
		{
			// Create MultipartFormDataContent for the form-data body
			using var content = new MultipartFormDataContent();

			// Add the file content with the correct name ("ProfilePicture") and filename
			// The stream will be disposed when the MultipartFormDataContent is disposed
			var streamContent = new StreamContent(selectedFile.OpenReadStream());
			streamContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
			content.Add(streamContent, "ProfilePicture", selectedFile.Name);

			// Send the POST request
			var response = await ApiService.PostAsync("api/user/update/profile-picture", content);

			// Check the response status
			if (response.IsSuccessStatusCode)
			{
				var result = await response.Content.ReadFromJsonAsync<ApiResponse<object>>();
				toastService.ShowSuccess("Profile picture updated");
				navigationManager.Refresh(true);
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				Console.WriteLine(error);
				toastService.ShowError(error);
			}
		}
		catch (Exception ex)
		{
			// Handle exceptions during the HTTP request
			Console.WriteLine(ex.Message);
			toastService.ShowError(ex.Message);
		}
	}
}