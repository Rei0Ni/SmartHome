@page "/hostconfiguration"
@using SmartHome.Dto.Settings
@inject ISecureStorageService SecureStorageService

<EditForm Model="HostSettings" OnValidSubmit="SaveConfigurations">
    <DataAnnotationsValidator />
    <div class="text-center mb-4">
        <h3 class="text-xl font-bold text-sky-400">Host Configuration</h3>
        <p class="mt-4 text-slate-400">Configure Primary and Secondary Hostnames for Backend Connection.</p>
    </div>

    <div class="space-y-4">
        <div>
            <label for="primaryHostname" class="mb-1">Local Hostname:</label>
            <InputText type="text" id="primaryHostname"
                class="block w-full px-4 py-2.5 bg-white border border-slate-600 rounded-lg shadow-sm placeholder-slate-500 text-slate-100
                        focus:outline-none focus:ring-2 focus:ring-sky-500 focus:border-sky-500 sm:text-sm"
                placeholder="e.g., 192.168.1.1 or mylocal.dev" @bind-value="HostSettings.PrimaryHost" />
            <ValidationMessage For="@(() => HostSettings.PrimaryHost)"
                               class="text-red-600 text-sm mt-1" />
        </div>

        <div>
            <label for="secondaryHostname" class="mb-1">Secondary Hostname:</label>
            <InputText type="text" id="secondaryHostname"
                class="block w-full px-4 py-2.5 bg-white border border-slate-600 rounded-lg shadow-sm placeholder-slate-500 text-slate-100
                        focus:outline-none focus:ring-2 focus:ring-sky-500 focus:border-sky-500 sm:text-sm"
                placeholder="e.g., remote-api.example.com" @bind-value="HostSettings.SecondaryHost" />
            <ValidationMessage For="@(() => HostSettings.SecondaryHost)"
                               class="text-red-600 text-sm mt-1" />
        </div>
    </div>

    <div class="pt-2 flex justify-center mt-4">
        <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white"
                style="background-color:var(--primary)">
            Save Configurations
        </button>
    </div>
</EditForm>

@code {
    private HostSettings HostSettings { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var Hostnames = await SecureStorageService.GetHostnamesAsync();

        HostSettings.PrimaryHost = Hostnames.Item1 ?? "";
        HostSettings.SecondaryHost = Hostnames.Item2 ?? "";
        await base.OnInitializedAsync();
    }

    private async Task SaveConfigurations()
    {

        var primaryHostname = HostSettings.PrimaryHost;
        var secondaryHostname = HostSettings.SecondaryHost;

        EnsureHttps(ref primaryHostname);
        EnsureHttps(ref secondaryHostname);

        HostSettings.PrimaryHost = primaryHostname;
        HostSettings.SecondaryHost = secondaryHostname;

        var result = await SecureStorageService.SetHostnamesAsync(HostSettings.PrimaryHost, HostSettings.SecondaryHost);
        if (!result)
        {
            return;
        }
        navigationManager.NavigateTo("/");
    }

    private void EnsureHttps(ref string hostname)
    {
        if (Uri.TryCreate(hostname, UriKind.Absolute, out var uri))
        {
            if (uri.Scheme != Uri.UriSchemeHttps)
            {
                var builder = new UriBuilder(uri)
                    {
                        Scheme = Uri.UriSchemeHttps,
                        Port = uri.Port // Ensure the port is preserved
                    };
                hostname = builder.ToString().TrimEnd('/');
            }
            else
            {
                hostname = uri.ToString().TrimEnd('/');
            }
        }
        else if (Uri.TryCreate("https://" + hostname, UriKind.Absolute, out var fallbackUri))
        {
            hostname = fallbackUri.ToString().TrimEnd('/');
        }
    }

}