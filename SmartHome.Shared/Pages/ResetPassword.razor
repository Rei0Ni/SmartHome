@page "/reset-password"
@using SmartHome.Shared.Models
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

<PageTitle>Reset Password</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <div class="logoSmartHome">
            <img src="_content/SmartHome.Shared/imgs/logotest2.svg" width="120" alt="logo" />
        </div>

        <div class="text">
            Password Reset
        </div>
        @* <div class="sub-text"> *@
        @* </div> *@

        <EditForm Context="PasswordResetContext" Model="@updatePasswordDto" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            @* <ValidationSummary /> *@

            <div class="data">
                <input type="text" id="username" placeholder="Username" @bind="updatePasswordDto.Username" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 valid" />
                <ValidationMessage For="@(() => updatePasswordDto.Username)" />
            </div>
            <div class="data relative mt-4">
                <input id="newPassword" @bind="updatePasswordDto.NewPassword" placeholder="New Password" type="@(showPassword ? "text" : "password")" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 valid" />
                <i class="absolute right-4 top-4 -translate-y-1/2 text-gray-400 cursor-pointer
                    fas @(showPassword ? "fa-eye-slash" : "fa-eye")"
                    @onclick="TogglePasswordVisibility"></i>
                <ValidationMessage For="@(() => updatePasswordDto.NewPassword)" />
            </div>
            <div class="data">
                <input id="retypePassword" @bind="updatePasswordDto.RetypePassword" placeholder="Retype Password" type="@(showPassword ? "text" : "password")" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 valid" />
                <ValidationMessage For="@(() => updatePasswordDto.RetypePassword)" />
            </div>
            <div class="data">
                <input type="text"
                       id="totp"
                       placeholder="6-Digit TOTP"
                       @bind="updatePasswordDto.Totp"
                       maxlength="6"
                       inputmode="numeric"
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 valid"
                       @oninput="FilterTotpInput" />
                <ValidationMessage For="@(() => updatePasswordDto.Totp)" />
            </div>
            <div class="login">
                <a href="/login">Need to Login?</a>
            </div>
            <div class="ResetPasswordBtn">
                <button type="submit">RESET PASSWORD</button>
            </div>
        </EditForm>
    </NotAuthorized>
    <Authorized>
        @{
            navigationManager.NavigateTo("/overview", true);
        }
    </Authorized>
</AuthorizeView>

@code {
    private UpdatePasswordDto updatePasswordDto = new UpdatePasswordDto();

    private async Task HandleValidSubmit()
    {
        var response = await ApiService.SendAsync(HttpMethod.Put, "api/user/update/password", updatePasswordDto);
        if (response.IsSuccessStatusCode)
        {
            // Handle success
            toastService.ShowSuccess("Password Was Resetted successfully");
            navigationManager.NavigateTo("/login");
        }
        else
        {
            // Handle error
			var content = await response.Content.ReadFromJsonAsync<ApiResponse<object>>();
            toastService.ShowError(content.Message);
        }
    }

    private bool showPassword = false;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void FilterTotpInput(ChangeEventArgs e)
    {
        if (e.Value is string value)
        {
            // Remove any non-numeric characters
            var digitsOnly = System.Text.RegularExpressions.Regex.Replace(value, "[^0-9]", "");
            // Enforce a maximum length of 6
            if (digitsOnly.Length > 6)
            {
                digitsOnly = digitsOnly.Substring(0, 6);
            }
            updatePasswordDto.Totp = digitsOnly;
        }
    }
}
