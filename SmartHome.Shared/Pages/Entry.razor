@page "/"
@using System.Net.NetworkInformation
@using SmartHome.Shared.Services
@layout AuthLayout
@inject IHostConfigurationCheckService HostConfigService
@inject IHostStatusService hostStatusService

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorizing>
        <div class="flex flex-col justify-center items-center h-full">
            <img src="_content/SmartHome.Shared/imgs/Loading_Lamp.svg" />
            <div class="mt-3 flex justify-center">
                <span class="text-2xl font-semibold dark:text-gray-50">Smart Home</span>
            </div>
        </div>
    </Authorizing>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {

        // 1. check device connection in mobile devices
        NetworkMonitor.ForceUpdateStatus();
        if (PlatformDetectionService.IsMobile())
        {
            if (NetworkMonitor.CurrentStatus != NetworkStatus.Internet){
                hostStatusService.SetNetworkConnectionError(true);
                navigationManager.NavigateTo("/connectionerror", true);
            }
        }

        // 2. Check host configuration first
        if (await HostConfigService.ShouldNavigateToConfigurationPageAsync() || HostStatusService.HasHostConfigurationError)
        {
            navigationManager.NavigateTo("/hostconfiguration", true);
            return;
        }

        // 3. Get auth state through provider
        var authState = await AuthenticationStateTask;

        // 4. Immediate navigation
        navigationManager.NavigateTo(authState.User.Identity?.IsAuthenticated == true
            ? "/overview"
            : "/login");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Force a state update to maintain circuit
            StateHasChanged();
        }
    }
}